<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="libfunctions/_MemGlobalAlloc.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Allocates the specified number of bytes from the heap</source>
<seg-source><mrk mid="0" mtype="seg">Allocates the specified number of bytes from the heap</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Allocates the specified number of bytes from the heap</mrk></target>
<note>Function _MemGlobalAlloc</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The number of bytes to allocate. If this parameter is zero and the $iFlags parameter specifies</source>
<seg-source><mrk mid="0" mtype="seg">The number of bytes to allocate.</mrk> <mrk mid="1" mtype="seg">If this parameter is zero and the $iFlags parameter specifies</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The number of bytes to allocate.</mrk> <mrk mid="1" mtype="seg">If this parameter is zero and the $iFlags parameter specifies</mrk></target>
<note>$iBytes</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"> $GMEM_MOVEABLE, the function returns a handle to a memory object that is marked as discarded.</source>
<seg-source> <mrk mid="0" mtype="seg">$GMEM_MOVEABLE, the function returns a handle to a memory object that is marked as discarded.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">$GMEM_MOVEABLE, the function returns a handle to a memory object that is marked as discarded.</mrk></target>
<note>$iBytes</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"> <bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The memory allocation attributes:</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The memory allocation attributes:</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The memory allocation attributes:</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $GMEM_FIXED - Allocates fixed memory. The return value is a pointer.</source>
<seg-source> <mrk mid="0" mtype="seg">    $GMEM_FIXED - Allocates fixed memory.</mrk> <mrk mid="1" mtype="seg">The return value is a pointer.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $GMEM_FIXED - Allocates fixed memory.</mrk> <mrk mid="1" mtype="seg">The return value is a pointer.</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $GMEM_MOVEABLE - Allocates movable memory. Memory blocks are never moved in physical memory, but they can be moved within the default heap.</source>
<seg-source> <mrk mid="0" mtype="seg">    $GMEM_MOVEABLE - Allocates movable memory.</mrk> <mrk mid="1" mtype="seg">Memory blocks are never moved in physical memory, but they can be moved within the default heap.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $GMEM_MOVEABLE - Allocates movable memory.</mrk> <mrk mid="1" mtype="seg">Memory blocks are never moved in physical memory, but they can be moved within the default heap.</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">         The return value is a handle to the memory object.</source>
<seg-source> <mrk mid="0" mtype="seg">        The return value is a handle to the memory object.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">        The return value is a handle to the memory object.</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">         To translate the handle into a pointer, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalLock.htm"></bpt>_MemGlobalLock()<ept id="1">&lt;/a></ept> function.</source>
<seg-source> <mrk mid="0" mtype="seg">        To translate the handle into a pointer, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalLock.htm"></bpt>_MemGlobalLock()<ept id="1">&lt;/a></ept> function.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">        To translate the handle into a pointer, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalLock.htm"></bpt>_MemGlobalLock()<ept id="1">&lt;/a></ept> function.</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">         This value cannot be combined with $GMEM_FIXED.</source>
<seg-source> <mrk mid="0" mtype="seg">        This value cannot be combined with $GMEM_FIXED.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">        This value cannot be combined with $GMEM_FIXED.</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">     $GMEM_ZEROINIT - Initializes memory contents to zero</source>
<seg-source> <mrk mid="0" mtype="seg">    $GMEM_ZEROINIT - Initializes memory contents to zero</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $GMEM_ZEROINIT - Initializes memory contents to zero</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">     $GHND - Combines $GMEM_MOVEABLE and $GMEM_ZEROINIT</source>
<seg-source> <mrk mid="0" mtype="seg">    $GHND - Combines $GMEM_MOVEABLE and $GMEM_ZEROINIT</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $GHND - Combines $GMEM_MOVEABLE and $GMEM_ZEROINIT</mrk></target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">     $GPTR - Combines $GMEM_FIXED and $GMEM_ZEROINIT </source>
<seg-source> <mrk mid="0" mtype="seg">    $GPTR - Combines $GMEM_FIXED and $GMEM_ZEROINIT</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $GPTR - Combines $GMEM_FIXED and $GMEM_ZEROINIT</mrk> </target>
<note>$iFlags</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">a handle to the newly allocated memory object.</source>
<seg-source><mrk mid="0" mtype="seg">a handle to the newly allocated memory object.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">a handle to the newly allocated memory object.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">0.</source>
<seg-source><mrk mid="0" mtype="seg">0.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">0.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">Windows memory management does not provide a separate local heap and global heap.</source>
<seg-source><mrk mid="0" mtype="seg">Windows memory management does not provide a separate local heap and global heap.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Windows memory management does not provide a separate local heap and global heap.</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en"> If this function succeeds, it allocates at least the amount of memory requested.</source>
<seg-source> <mrk mid="0" mtype="seg">If this function succeeds, it allocates at least the amount of memory requested.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If this function succeeds, it allocates at least the amount of memory requested.</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en"> If the actual amount allocated is greater than the amount requested, the process can use the entire amount.</source>
<seg-source> <mrk mid="0" mtype="seg">If the actual amount allocated is greater than the amount requested, the process can use the entire amount.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If the actual amount allocated is greater than the amount requested, the process can use the entire amount.</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en"> To determine the actual number of bytes allocated, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalSize.htm"></bpt>_MemGlobalSize()<ept id="1">&lt;/a></ept> function.</source>
<seg-source> <mrk mid="0" mtype="seg">To determine the actual number of bytes allocated, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalSize.htm"></bpt>_MemGlobalSize()<ept id="1">&lt;/a></ept> function.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">To determine the actual number of bytes allocated, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalSize.htm"></bpt>_MemGlobalSize()<ept id="1">&lt;/a></ept> function.</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en"> If the heap does not contain sufficient free space to satisfy the request, this function returns NULL.</source>
<seg-source> <mrk mid="0" mtype="seg">If the heap does not contain sufficient free space to satisfy the request, this function returns NULL.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If the heap does not contain sufficient free space to satisfy the request, this function returns NULL.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en"> Memory allocated with this function is guaranteed to be aligned on an 8 byte boundary.</source>
<seg-source> <mrk mid="0" mtype="seg">Memory allocated with this function is guaranteed to be aligned on an 8 byte boundary.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Memory allocated with this function is guaranteed to be aligned on an 8 byte boundary.</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en"> To execute dynamically generated code, use the <bpt id="1" ctype="x-a">&lt;a href="_MemVirtualAlloc.htm"></bpt>_MemVirtualAlloc()<ept id="1">&lt;/a></ept> function to allocate memory and the _Mem_VirtualProtect() function to grant $PAGE_EXECUTE access.</source>
<seg-source> <mrk mid="0" mtype="seg">To execute dynamically generated code, use the <bpt id="1" ctype="x-a">&lt;a href="_MemVirtualAlloc.htm"></bpt>_MemVirtualAlloc()<ept id="1">&lt;/a></ept> function to allocate memory and the _Mem_VirtualProtect() function to grant $PAGE_EXECUTE access.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">To execute dynamically generated code, use the <bpt id="1" ctype="x-a">&lt;a href="_MemVirtualAlloc.htm"></bpt>_MemVirtualAlloc()<ept id="1">&lt;/a></ept> function to allocate memory and the _Mem_VirtualProtect() function to grant $PAGE_EXECUTE access.</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en"> To free the memory, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalFree.htm"></bpt>_MemGlobalFree()<ept id="1">&lt;/a></ept> function.</source>
<seg-source> <mrk mid="0" mtype="seg">To free the memory, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalFree.htm"></bpt>_MemGlobalFree()<ept id="1">&lt;/a></ept> function.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">To free the memory, use the <bpt id="1" ctype="x-a">&lt;a href="_MemGlobalFree.htm"></bpt>_MemGlobalFree()<ept id="1">&lt;/a></ept> function.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">See Also</source>
<seg-source><mrk mid="0" mtype="seg">See Also</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">See Also</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(GlobalAlloc);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>GlobalAlloc<ept id="1">&lt;/a></ept> in MSDN Library.</source>
<seg-source><mrk mid="0" mtype="seg">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(GlobalAlloc);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>GlobalAlloc<ept id="1">&lt;/a></ept> in MSDN Library.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(GlobalAlloc);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>GlobalAlloc<ept id="1">&lt;/a></ept> in MSDN Library.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
