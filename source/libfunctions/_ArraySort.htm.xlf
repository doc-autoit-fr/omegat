<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="libfunctions/_ArraySort.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Sort a 1D or 2D array on a specific index using the dualpivotsort/quicksort/insertionsort algorithms</source>
<seg-source><mrk mid="0" mtype="seg">Sort a 1D or 2D array on a specific index using the dualpivotsort/quicksort/insertionsort algorithms</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Sort a 1D or 2D array on a specific index using the dualpivotsort/quicksort/insertionsort algorithms</mrk></target>
<note>Function _ArraySort</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">Array to sort</source>
<seg-source><mrk mid="0" mtype="seg">Array to sort</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Array to sort</mrk></target>
<note>$aArray</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> If set to 1, sort in descending order</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">If set to 1, sort in descending order</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">If set to 1, sort in descending order</mrk></target>
<note>$iDescending</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Index of array to start sorting (default 0 = first element or row)</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Index of array to start sorting (default 0 = first element or row)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Index of array to start sorting (default 0 = first element or row)</mrk></target>
<note>$iStart</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Index of array to stop sorting (default 0 = last element or row)</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Index of array to stop sorting (default 0 = last element or row)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Index of array to stop sorting (default 0 = last element or row)</mrk></target>
<note>$iEnd</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Sub-index to sort on in 2D arrays (default 0 = first column)</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Sub-index to sort on in 2D arrays (default 0 = first column)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Sub-index to sort on in 2D arrays (default 0 = first column)</mrk></target>
<note>$iSubItem</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Use pivot sort algorithm (default = quicksort)</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Use pivot sort algorithm (default = quicksort)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Use pivot sort algorithm (default = quicksort)</mrk></target>
<note>$iPivot</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">1.</source>
<seg-source><mrk mid="0" mtype="seg">1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">0 and sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">0 and sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">0 and sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">1 - $aArray is not an array</source>
<seg-source><mrk mid="0" mtype="seg">1 - $aArray is not an array</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1 - $aArray is not an array</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en"> 2 - $iStart is greater than $iEnd</source>
<seg-source> <mrk mid="0" mtype="seg">2 - $iStart is greater than $iEnd</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 - $iStart is greater than $iEnd</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en"> 3 - $iSubItem is greater than subitem count</source>
<seg-source> <mrk mid="0" mtype="seg">3 - $iSubItem is greater than subitem count</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">3 - $iSubItem is greater than subitem count</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en"> 4 - $aArray is not a 1D or 2D array</source>
<seg-source> <mrk mid="0" mtype="seg">4 - $aArray is not a 1D or 2D array</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">4 - $aArray is not a 1D or 2D array</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en"> 5 - $aArray is empty</source>
<seg-source> <mrk mid="0" mtype="seg">5 - $aArray is empty</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">5 - $aArray is empty</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en"> 6 - $iPivot used with 2D array</source>
<seg-source> <mrk mid="0" mtype="seg">6 - $iPivot used with 2D array</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">6 - $iPivot used with 2D array</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">By default the UDF uses a QuickSort algorithm to sort the array. Setting the $iPivot parameter uses a DualPivotSort algorithm on 1D arrays - this can be significantly faster for large arrays (> 50 elements) - but sorting 2D arrays with this algorithm is very much slower and the UDF will return an error in this case.</source>
<seg-source><mrk mid="0" mtype="seg">By default the UDF uses a QuickSort algorithm to sort the array.</mrk> <mrk mid="1" mtype="seg">Setting the $iPivot parameter uses a DualPivotSort algorithm on 1D arrays - this can be significantly faster for large arrays (> 50 elements) - but sorting 2D arrays with this algorithm is very much slower and the UDF will return an error in this case.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">By default the UDF uses a QuickSort algorithm to sort the array.</mrk> <mrk mid="1" mtype="seg">Setting the $iPivot parameter uses a DualPivotSort algorithm on 1D arrays - this can be significantly faster for large arrays (> 50 elements) - but sorting 2D arrays with this algorithm is very much slower and the UDF will return an error in this case.</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en"> In both algorithms, relatively short arrays will be sorted using an insertion sort (&lt; 15 elements with QuickSort; &lt; 45 elements with Dual PivotSort).</source>
<seg-source> <mrk mid="0" mtype="seg">In both algorithms, relatively short arrays will be sorted using an insertion sort (&lt; 15 elements with QuickSort; &lt; 45 elements with Dual PivotSort).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">In both algorithms, relatively short arrays will be sorted using an insertion sort (&lt; 15 elements with QuickSort; &lt; 45 elements with Dual PivotSort).</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en"> Note that there is no guarantee that a specific algorithm will be faster in a given case.</source>
<seg-source> <mrk mid="0" mtype="seg">Note that there is no guarantee that a specific algorithm will be faster in a given case.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Note that there is no guarantee that a specific algorithm will be faster in a given case.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">Example 1</source>
<seg-source><mrk mid="0" mtype="seg">Example 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 1</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">using a 1D array</source>
<seg-source><mrk mid="0" mtype="seg">using a 1D array</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">using a 1D array</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">BEFORE _ArraySort()</source>
<seg-source><mrk mid="0" mtype="seg">BEFORE _ArraySort()</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">BEFORE _ArraySort()</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">AFTER QuickSort ascending</source>
<seg-source><mrk mid="0" mtype="seg">AFTER QuickSort ascending</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">AFTER QuickSort ascending</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">AFTER QuickSort descending</source>
<seg-source><mrk mid="0" mtype="seg">AFTER QuickSort descending</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">AFTER QuickSort descending</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en">AFTER QuickSort from index 3 to 6</source>
<seg-source><mrk mid="0" mtype="seg">AFTER QuickSort from index 3 to 6</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">AFTER QuickSort from index 3 to 6</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en">AFTER DualPivotSort ascending</source>
<seg-source><mrk mid="0" mtype="seg">AFTER DualPivotSort ascending</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">AFTER DualPivotSort ascending</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">Example 2</source>
<seg-source><mrk mid="0" mtype="seg">Example 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 2</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">using a 2D array</source>
<seg-source><mrk mid="0" mtype="seg">using a 2D array</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">using a 2D array</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">$avArray BEFORE _ArraySort()</source>
<seg-source><mrk mid="0" mtype="seg">$avArray BEFORE _ArraySort()</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$avArray BEFORE _ArraySort()</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">$avArray AFTER _ArraySort() ascending column 0</source>
<seg-source><mrk mid="0" mtype="seg">$avArray AFTER _ArraySort() ascending column 0</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$avArray AFTER _ArraySort() ascending column 0</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">$avArray AFTER _ArraySort() ascending column 1</source>
<seg-source><mrk mid="0" mtype="seg">$avArray AFTER _ArraySort() ascending column 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$avArray AFTER _ArraySort() ascending column 1</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">$avArray AFTER _ArraySort() ascending column 2</source>
<seg-source><mrk mid="0" mtype="seg">$avArray AFTER _ArraySort() ascending column 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$avArray AFTER _ArraySort() ascending column 2</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
