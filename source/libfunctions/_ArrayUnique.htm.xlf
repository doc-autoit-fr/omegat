<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="libfunctions/_ArrayUnique.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Returns the Elements from a column of a 1D or 2D array, removing all duplicates</source>
<seg-source><mrk mid="0" mtype="seg">Returns the Elements from a column of a 1D or 2D array, removing all duplicates</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the Elements from a column of a 1D or 2D array, removing all duplicates</mrk></target>
<note>Function _ArrayUnique</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The Array to use</source>
<seg-source><mrk mid="0" mtype="seg">The Array to use</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The Array to use</mrk></target>
<note>$aArray</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> 0-based column to be used - default 0. (2D only)</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">0-based column to be used - default 0.</mrk> <mrk mid="2" mtype="seg">(2D only)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">0-based column to be used - default 0.</mrk> <mrk mid="2" mtype="seg">(2D only)</mrk></target>
<note>$iColumn</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The array is 0-based or 1-based. Default 0 : 0-based.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The array is 0-based or 1-based.</mrk> <mrk mid="2" mtype="seg">Default 0 :</mrk> <mrk mid="3" mtype="seg">0-based.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The array is 0-based or 1-based.</mrk> <mrk mid="2" mtype="seg">Default 0 :</mrk> <mrk mid="3" mtype="seg">0-based.</mrk></target>
<note>$iBase</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Flag to indicate if the operations should be case sensitive. Default 0 : not case sensitive.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Flag to indicate if the operations should be case sensitive.</mrk> <mrk mid="2" mtype="seg">Default 0 : not case sensitive.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Flag to indicate if the operations should be case sensitive.</mrk> <mrk mid="2" mtype="seg">Default 0 : not case sensitive.</mrk></target>
<note>$iCase</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Flag to determine if [0] element holds the count of returned items (default) - see Remarks for details.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Flag to determine if [0] element holds the count of returned items (default) - see Remarks for details.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Flag to determine if [0] element holds the count of returned items (default) - see Remarks for details.</mrk></target>
<note>$iCount</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Flag to change function algorithm - see Remarks for details.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Flag to change function algorithm - see Remarks for details.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Flag to change function algorithm - see Remarks for details.</mrk></target>
<note>$iIntType</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">a 1-dimensional array containing only the unique elements of that Column.</source>
<seg-source><mrk mid="0" mtype="seg">a 1-dimensional array containing only the unique elements of that Column.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">a 1-dimensional array containing only the unique elements of that Column.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">1 - $aArray is not an array or is an empty array.</source>
<seg-source><mrk mid="0" mtype="seg">1 - $aArray is not an array or is an empty array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1 - $aArray is not an array or is an empty array.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en"> 2 - $aArray is not a 1D or 2D array</source>
<seg-source> <mrk mid="0" mtype="seg">2 - $aArray is not a 1D or 2D array</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 - $aArray is not a 1D or 2D array</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en"> 3 - Invalid $iBase or $iCase value</source>
<seg-source> <mrk mid="0" mtype="seg">3 - Invalid $iBase or $iCase value</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">3 - Invalid $iBase or $iCase value</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en"> 4 - Invalid $iCount value</source>
<seg-source> <mrk mid="0" mtype="seg">4 - Invalid $iCount value</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">4 - Invalid $iCount value</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en"> 5 - Invalid $iIntType value</source>
<seg-source> <mrk mid="0" mtype="seg">5 - Invalid $iIntType value</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">5 - Invalid $iIntType value</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en"> 6 - $iColumn ouside array bounds</source>
<seg-source> <mrk mid="0" mtype="seg">6 - $iColumn ouside array bounds</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">6 - $iColumn ouside array bounds</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en"> 7 - Mismatch of Int32 and Int64 items - requires $iIntType to be set</source>
<seg-source> <mrk mid="0" mtype="seg">7 - Mismatch of Int32 and Int64 items - requires $iIntType to be set</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">7 - Mismatch of Int32 and Int64 items - requires $iIntType to be set</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Returns an array containing the unique elements.</source>
<seg-source><mrk mid="0" mtype="seg">Returns an array containing the unique elements.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns an array containing the unique elements.</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en"> By default $iCount is set to $ARRAYUNIQUE_COUNT (1) and a count is placed in the [0] element. Setting $iCount to $ARRAYUNIQUE_NOCOUNT (0) returns a list without a count.</source>
<seg-source> <mrk mid="0" mtype="seg">By default $iCount is set to $ARRAYUNIQUE_COUNT (1) and a count is placed in the [0] element.</mrk> <mrk mid="1" mtype="seg">Setting $iCount to $ARRAYUNIQUE_NOCOUNT (0) returns a list without a count.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">By default $iCount is set to $ARRAYUNIQUE_COUNT (1) and a count is placed in the [0] element.</mrk> <mrk mid="1" mtype="seg">Setting $iCount to $ARRAYUNIQUE_NOCOUNT (0) returns a list without a count.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en"> The function can use a fast algorithm as long as the elements to be examined do not contain Int64 values (e.g. 64 bit integers, handles, pointers) - if these values are present then the function must use a slower algorithm. Setting the $iIntType parameter alters function behaviour as follows:</source>
<seg-source> <mrk mid="0" mtype="seg">The function can use a fast algorithm as long as the elements to be examined do not contain Int64 values (e.g.</mrk> <mrk mid="1" mtype="seg">64 bit integers, handles, pointers) - if these values are present then the function must use a slower algorithm.</mrk> <mrk mid="2" mtype="seg">Setting the $iIntType parameter alters function behaviour as follows:</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The function can use a fast algorithm as long as the elements to be examined do not contain Int64 values (e.g.</mrk> <mrk mid="1" mtype="seg">64 bit integers, handles, pointers) - if these values are present then the function must use a slower algorithm.</mrk> <mrk mid="2" mtype="seg">Setting the $iIntType parameter alters function behaviour as follows:</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en"> $ARRAYUNIQUE_AUTO (0) (Default)    : If first element not an integer runs fast algorithm - returns error if Int64 elements are found.</source>
<seg-source> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_AUTO (0) (Default)    :</mrk> <mrk mid="1" mtype="seg">If first element not an integer runs fast algorithm - returns error if Int64 elements are found.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_AUTO (0) (Default)    :</mrk> <mrk mid="1" mtype="seg">If first element not an integer runs fast algorithm - returns error if Int64 elements are found.</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">     : If first element is integer sets relevant FORCE32/64 value.</source>
<seg-source> <mrk mid="0" mtype="seg">    : If first element is integer sets relevant FORCE32/64 value.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    : If first element is integer sets relevant FORCE32/64 value.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en"> $ARRAYUNIQUE_FORCE32 (1)     : Forces all integers to Int32, runs fast algorithm - returns error if Int64 values are found.</source>
<seg-source> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_FORCE32 (1)     :</mrk> <mrk mid="1" mtype="seg">Forces all integers to Int32, runs fast algorithm - returns error if Int64 values are found.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_FORCE32 (1)     :</mrk> <mrk mid="1" mtype="seg">Forces all integers to Int32, runs fast algorithm - returns error if Int64 values are found.</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en"> $ARRAYUNIQUE_FORCE64 (2)     : Forces all integers to Int64, runs slow algorithm - returns error if Int32 values are found.</source>
<seg-source> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_FORCE64 (2)     :</mrk> <mrk mid="1" mtype="seg">Forces all integers to Int64, runs slow algorithm - returns error if Int32 values are found.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_FORCE64 (2)     :</mrk> <mrk mid="1" mtype="seg">Forces all integers to Int64, runs slow algorithm - returns error if Int32 values are found.</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en"> $ARRAYUNIQUE_MATCH (3)         : 0x00000123 and 0x0123 considered the same value, only first encountered returned - runs slow algorithm.</source>
<seg-source> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_MATCH (3)         :</mrk> <mrk mid="1" mtype="seg">0x00000123 and 0x0123 considered the same value, only first encountered returned - runs slow algorithm.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_MATCH (3)         :</mrk> <mrk mid="1" mtype="seg">0x00000123 and 0x0123 considered the same value, only first encountered returned - runs slow algorithm.</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en"> $ARRAYUNIQUE_DISTINCT (4)    : 0x00000123 and 0x0123 considered as distinct, both returned - runs slow algorithm.</source>
<seg-source> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_DISTINCT (4)    :</mrk> <mrk mid="1" mtype="seg">0x00000123 and 0x0123 considered as distinct, both returned - runs slow algorithm.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">$ARRAYUNIQUE_DISTINCT (4)    :</mrk> <mrk mid="1" mtype="seg">0x00000123 and 0x0123 considered as distinct, both returned - runs slow algorithm.</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en"> Using other than the default $ARRAYUNIQUE_AUTO setting is only required it is known or suspected that Int64 values will be examined. The requirement to use a slower algorithm when dealing with Int64 values is a limitation of the Scripting.Dictionary object used within the function, not of AutoIt itself.</source>
<seg-source> <mrk mid="0" mtype="seg">Using other than the default $ARRAYUNIQUE_AUTO setting is only required it is known or suspected that Int64 values will be examined.</mrk> <mrk mid="1" mtype="seg">The requirement to use a slower algorithm when dealing with Int64 values is a limitation of the Scripting.</mrk><mrk mid="2" mtype="seg">Dictionary object used within the function, not of AutoIt itself.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Using other than the default $ARRAYUNIQUE_AUTO setting is only required it is known or suspected that Int64 values will be examined.</mrk> <mrk mid="1" mtype="seg">The requirement to use a slower algorithm when dealing with Int64 values is a limitation of the Scripting.</mrk><mrk mid="2" mtype="seg">Dictionary object used within the function, not of AutoIt itself.</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">Example 1</source>
<seg-source><mrk mid="0" mtype="seg">Example 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 1</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">Create a 1-dimensional array that contains duplicate values.</source>
<seg-source><mrk mid="0" mtype="seg">Create a 1-dimensional array that contains duplicate values.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Create a 1-dimensional array that contains duplicate values.</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">$aArray Initial</source>
<seg-source><mrk mid="0" mtype="seg">$aArray Initial</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aArray Initial</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">Display the current array.</source>
<seg-source><mrk mid="0" mtype="seg">Display the current array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the current array.</mrk></target>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">Use default parameters to create a unique array.</source>
<seg-source><mrk mid="0" mtype="seg">Use default parameters to create a unique array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use default parameters to create a unique array.</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">$aArray Unique</source>
<seg-source><mrk mid="0" mtype="seg">$aArray Unique</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aArray Unique</mrk></target>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">Display the unique array.</source>
<seg-source><mrk mid="0" mtype="seg">Display the unique array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the unique array.</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">Example 2</source>
<seg-source><mrk mid="0" mtype="seg">Example 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 2</mrk></target>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">A</source>
<seg-source><mrk mid="0" mtype="seg">A</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A</mrk></target>
</trans-unit>
<trans-unit id="42">
<source xml:lang="en">B</source>
<seg-source><mrk mid="0" mtype="seg">B</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">B</mrk></target>
</trans-unit>
<trans-unit id="43">
<source xml:lang="en">C</source>
<seg-source><mrk mid="0" mtype="seg">C</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">C</mrk></target>
</trans-unit>
<trans-unit id="44">
<source xml:lang="en">A</source>
<seg-source><mrk mid="0" mtype="seg">A</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A</mrk></target>
</trans-unit>
<trans-unit id="45">
<source xml:lang="en">B</source>
<seg-source><mrk mid="0" mtype="seg">B</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">B</mrk></target>
</trans-unit>
<trans-unit id="46">
<source xml:lang="en">C</source>
<seg-source><mrk mid="0" mtype="seg">C</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">C</mrk></target>
</trans-unit>
<trans-unit id="47">
<source xml:lang="en">2D array</source>
<seg-source><mrk mid="0" mtype="seg">2D array</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">2D array</mrk></target>
</trans-unit>
<trans-unit id="48">
<source xml:lang="en">Display the current array.</source>
<seg-source><mrk mid="0" mtype="seg">Display the current array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the current array.</mrk></target>
</trans-unit>
<trans-unit id="49">
<source xml:lang="en">Use default parameters to create a unique array of the first column.</source>
<seg-source><mrk mid="0" mtype="seg">Use default parameters to create a unique array of the first column.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Use default parameters to create a unique array of the first column.</mrk></target>
</trans-unit>
<trans-unit id="50">
<source xml:lang="en">$aArray first column</source>
<seg-source><mrk mid="0" mtype="seg">$aArray first column</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aArray first column</mrk></target>
</trans-unit>
<trans-unit id="51">
<source xml:lang="en">Display the unique array.</source>
<seg-source><mrk mid="0" mtype="seg">Display the unique array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the unique array.</mrk></target>
</trans-unit>
<trans-unit id="52">
<source xml:lang="en">Create a unique array of the second column.</source>
<seg-source><mrk mid="0" mtype="seg">Create a unique array of the second column.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Create a unique array of the second column.</mrk></target>
</trans-unit>
<trans-unit id="53">
<source xml:lang="en">$aArray second column</source>
<seg-source><mrk mid="0" mtype="seg">$aArray second column</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aArray second column</mrk></target>
</trans-unit>
<trans-unit id="54">
<source xml:lang="en">Display the unique array.</source>
<seg-source><mrk mid="0" mtype="seg">Display the unique array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the unique array.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
