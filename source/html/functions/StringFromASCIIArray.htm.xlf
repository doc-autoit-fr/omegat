<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/functions/StringFromASCIIArray.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Converts an array of ASCII codes to a string.</source>
<seg-source><mrk mid="0" mtype="seg">Converts an array of ASCII codes to a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Converts an array of ASCII codes to a string.</mrk></target>
<note>Function StringFromASCIIArray</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The array of ASCII codes to convert to characters.</source>
<seg-source><mrk mid="0" mtype="seg">The array of ASCII codes to convert to characters.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The array of ASCII codes to convert to characters.</mrk></target>
<note>array</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The 0-based index to start processing from (Default: 0).</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The 0-based index to start processing from (Default:</mrk> <mrk mid="2" mtype="seg">0).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The 0-based index to start processing from (Default:</mrk> <mrk mid="2" mtype="seg">0).</mrk></target>
<note>start</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"> <bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The 0-based index to end processing at (Default: <bpt id="1" ctype="x-a">&lt;a href="UBound.htm"></bpt>UBound<ept id="1">&lt;/a></ept>($aArray)). Note that the character at this index is NOT included in the output. </source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The 0-based index to end processing at (Default:</mrk> <mrk mid="2" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="UBound.htm"></bpt>UBound<ept id="1">&lt;/a></ept>($aArray)).</mrk> <mrk mid="3" mtype="seg">Note that the character at this index is NOT included in the output.</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The 0-based index to end processing at (Default:</mrk> <mrk mid="2" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="UBound.htm"></bpt>UBound<ept id="1">&lt;/a></ept>($aArray)).</mrk> <mrk mid="3" mtype="seg">Note that the character at this index is NOT included in the output.</mrk> </target>
<note>end</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The array contains values in the specified character set:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The array contains values in the specified character set:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The array contains values in the specified character set:</mrk></target>
<note>encoding</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $SE_UTF16 (0) = UTF-16 (Default)</source>
<seg-source> <mrk mid="0" mtype="seg">    $SE_UTF16 (0) = UTF-16 (Default)</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SE_UTF16 (0) = UTF-16 (Default)</mrk></target>
<note>encoding</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $SE_ANSI (1) = ANSI</source>
<seg-source> <mrk mid="0" mtype="seg">    $SE_ANSI (1) = ANSI</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SE_ANSI (1) = ANSI</mrk></target>
<note>encoding</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">     $SE_UTF8 (2) = UTF-8</source>
<seg-source> <mrk mid="0" mtype="seg">    $SE_UTF8 (2) = UTF-8</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SE_UTF8 (2) = UTF-8</mrk></target>
<note>encoding</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"> Constants are defined in StringConstants.au3.</source>
<seg-source> <mrk mid="0" mtype="seg">Constants are defined in StringConstants.au3.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Constants are defined in StringConstants.au3.</mrk></target>
<note>encoding</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">a string with character representations of the ASCII codes.</source>
<seg-source><mrk mid="0" mtype="seg">a string with character representations of the ASCII codes.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">a string with character representations of the ASCII codes.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">an empty string and sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">an empty string and sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">an empty string and sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">1 = Input is not an array.</source>
<seg-source><mrk mid="0" mtype="seg">1 = Input is not an array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1 = Input is not an array.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en"> 2 = Invalid start index.</source>
<seg-source> <mrk mid="0" mtype="seg">2 = Invalid start index.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 = Invalid start index.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">The returned string may contain embedded <bpt id="1" ctype="x-a">&lt;a href="Chr.htm"></bpt>Chr<ept id="1">&lt;/a></ept>(0) but will still be a string type. Most string functions will stop at the first <bpt id="1" ctype="x-a">&lt;a href="Chr.htm"></bpt>Chr<ept id="1">&lt;/a></ept>(0) found, however, if access to the entire contents of the string is required then the <bpt id="2" ctype="x-a">&lt;a href="StringToBinary.htm"></bpt>StringToBinary()<ept id="2">&lt;/a></ept> function can convert it into a BinaryString preserving all the data.</source>
<seg-source><mrk mid="0" mtype="seg">The returned string may contain embedded <bpt id="1" ctype="x-a">&lt;a href="Chr.htm"></bpt>Chr<ept id="1">&lt;/a></ept>(0) but will still be a string type.</mrk> <mrk mid="1" mtype="seg">Most string functions will stop at the first <bpt id="1" ctype="x-a">&lt;a href="Chr.htm"></bpt>Chr<ept id="1">&lt;/a></ept>(0) found, however, if access to the entire contents of the string is required then the <bpt id="2" ctype="x-a">&lt;a href="StringToBinary.htm"></bpt>StringToBinary()<ept id="2">&lt;/a></ept> function can convert it into a BinaryString preserving all the data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The returned string may contain embedded <bpt id="1" ctype="x-a">&lt;a href="Chr.htm"></bpt>Chr<ept id="1">&lt;/a></ept>(0) but will still be a string type.</mrk> <mrk mid="1" mtype="seg">Most string functions will stop at the first <bpt id="1" ctype="x-a">&lt;a href="Chr.htm"></bpt>Chr<ept id="1">&lt;/a></ept>(0) found, however, if access to the entire contents of the string is required then the <bpt id="2" ctype="x-a">&lt;a href="StringToBinary.htm"></bpt>StringToBinary()<ept id="2">&lt;/a></ept> function can convert it into a BinaryString preserving all the data.</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en"> If you attempt to create an array manually (As opposed to using an array returned from <bpt id="1" ctype="x-a">&lt;a href="StringToASCIIArray.htm"></bpt>StringToASCIIArray()<ept id="1">&lt;/a></ept>) then the codes in the array must be specified in UNICODE.</source>
<seg-source> <mrk mid="0" mtype="seg">If you attempt to create an array manually (As opposed to using an array returned from <bpt id="1" ctype="x-a">&lt;a href="StringToASCIIArray.htm"></bpt>StringToASCIIArray()<ept id="1">&lt;/a></ept>) then the codes in the array must be specified in UNICODE.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If you attempt to create an array manually (As opposed to using an array returned from <bpt id="1" ctype="x-a">&lt;a href="StringToASCIIArray.htm"></bpt>StringToASCIIArray()<ept id="1">&lt;/a></ept>) then the codes in the array must be specified in UNICODE.</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">Required for _ArrayDisplay() only.</source>
<seg-source><mrk mid="0" mtype="seg">Required for _ArrayDisplay() only.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Required for _ArrayDisplay() only.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">Convert the string to an ASCII array.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the string to an ASCII array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the string to an ASCII array.</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">This is a sentence with whitespace.</source>
<seg-source><mrk mid="0" mtype="seg">This is a sentence with whitespace.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is a sentence with whitespace.</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">Display the array to see that it contains the ASCII values for each character in the string.</source>
<seg-source><mrk mid="0" mtype="seg">Display the array to see that it contains the ASCII values for each character in the string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the array to see that it contains the ASCII values for each character in the string.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">Convert the array into a string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the array into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the array into a string.</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">Display the string to see that it matches the original string initially converted to an array.</source>
<seg-source><mrk mid="0" mtype="seg">Display the string to see that it matches the original string initially converted to an array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the string to see that it matches the original string initially converted to an array.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
