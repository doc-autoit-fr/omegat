<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/functions/Int.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Returns the integer (whole number) representation of an expression.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the integer (whole number) representation of an expression.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the integer (whole number) representation of an expression.</mrk></target>
<note>Function Int</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">An expression to convert into an integer.</source>
<seg-source><mrk mid="0" mtype="seg">An expression to convert into an integer.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">An expression to convert into an integer.</mrk></target>
<note>expression</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Defines behavior.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Defines behavior.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Defines behavior.</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"> Can be one of the following:</source>
<seg-source> <mrk mid="0" mtype="seg">Can be one of the following:</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Can be one of the following:</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $NUMBER_AUTO (0) = (default) the result is auto-sized integer. See remarks.</source>
<seg-source> <mrk mid="0" mtype="seg">    $NUMBER_AUTO (0) = (default) the result is auto-sized integer.</mrk> <mrk mid="1" mtype="seg">See remarks.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $NUMBER_AUTO (0) = (default) the result is auto-sized integer.</mrk> <mrk mid="1" mtype="seg">See remarks.</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $NUMBER_32BIT (1) = string is interpreted as a 32bit integer</source>
<seg-source> <mrk mid="0" mtype="seg">    $NUMBER_32BIT (1) = string is interpreted as a 32bit integer</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $NUMBER_32BIT (1) = string is interpreted as a 32bit integer</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $NUMBER_64BIT (2) = string is interpreted as a 64bit integer</source>
<seg-source> <mrk mid="0" mtype="seg">    $NUMBER_64BIT (2) = string is interpreted as a 64bit integer</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $NUMBER_64BIT (2) = string is interpreted as a 64bit integer</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en"> Constants are defined in "AutoItConstants.au3".</source>
<seg-source> <mrk mid="0" mtype="seg">Constants are defined in "AutoItConstants.au3".</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Constants are defined in "AutoItConstants.au3".</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">Returns an integer.</source>
<seg-source><mrk mid="0" mtype="seg">Returns an integer.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns an integer.</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">Default behavior is that if the result is within range of 32bit integer then 32bit integer is returned. If not, 64bit integer is returned. Both are signed.</source>
<seg-source><mrk mid="0" mtype="seg">Default behavior is that if the result is within range of 32bit integer then 32bit integer is returned.</mrk> <mrk mid="1" mtype="seg">If not, 64bit integer is returned.</mrk> <mrk mid="2" mtype="seg">Both are signed.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Default behavior is that if the result is within range of 32bit integer then 32bit integer is returned.</mrk> <mrk mid="1" mtype="seg">If not, 64bit integer is returned.</mrk> <mrk mid="2" mtype="seg">Both are signed.</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en"> Fractional portions are truncated, so <bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int<ept id="1">&lt;/a></ept>(1.999999) returns 1</source>
<seg-source> <mrk mid="0" mtype="seg">Fractional portions are truncated, so <bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int<ept id="1">&lt;/a></ept>(1.999999) returns 1</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Fractional portions are truncated, so <bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int<ept id="1">&lt;/a></ept>(1.999999) returns 1</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int<ept id="1">&lt;/a></ept>(0/0) returns -9223372036854775807, if you were wondering.</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int<ept id="1">&lt;/a></ept>(0/0) returns -9223372036854775807, if you were wondering.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int<ept id="1">&lt;/a></ept>(0/0) returns -9223372036854775807, if you were wondering.</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en"> This function makes minor corrections to floating point numbers to account for the imprecise nature of floating point numbers. For example, the floating point expression 0.7 + 0.2 + 0.1 produces a floating point number that is not quite 1.0. <bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="1">&lt;/a></ept> corrects for this anomaly, however, certain extremely rare circumstances may lead to <bpt id="2" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="2">&lt;/a></ept> returning an unexpected value (the odds of getting an unexpected value are less than if <bpt id="3" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="3">&lt;/a></ept> did not attempt any correction at all).</source>
<seg-source> <mrk mid="0" mtype="seg">This function makes minor corrections to floating point numbers to account for the imprecise nature of floating point numbers.</mrk> <mrk mid="1" mtype="seg">For example, the floating point expression 0.7 + 0.2 + 0.1 produces a floating point number that is not quite 1.0.</mrk> <mrk mid="2" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="1">&lt;/a></ept> corrects for this anomaly, however, certain extremely rare circumstances may lead to <bpt id="2" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="2">&lt;/a></ept> returning an unexpected value (the odds of getting an unexpected value are less than if <bpt id="3" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="3">&lt;/a></ept> did not attempt any correction at all).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">This function makes minor corrections to floating point numbers to account for the imprecise nature of floating point numbers.</mrk> <mrk mid="1" mtype="seg">For example, the floating point expression 0.7 + 0.2 + 0.1 produces a floating point number that is not quite 1.0.</mrk> <mrk mid="2" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="1">&lt;/a></ept> corrects for this anomaly, however, certain extremely rare circumstances may lead to <bpt id="2" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="2">&lt;/a></ept> returning an unexpected value (the odds of getting an unexpected value are less than if <bpt id="3" ctype="x-a">&lt;a href="Int.htm"></bpt>Int()<ept id="3">&lt;/a></ept> did not attempt any correction at all).</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">Assign a Local variable the int representation of 10.793.</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable the int representation of 10.793.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable the int representation of 10.793.</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">Display the result.</source>
<seg-source><mrk mid="0" mtype="seg">Display the result.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the result.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
