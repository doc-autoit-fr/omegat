<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/functions/StdinWrite.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Writes a number of characters to the STDIN stream of a previously run child process.</source>
<seg-source><mrk mid="0" mtype="seg">Writes a number of characters to the STDIN stream of a previously run child process.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Writes a number of characters to the STDIN stream of a previously run child process.</mrk></target>
<note>Function StdinWrite</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The process ID of a child process, as returned by a previous call to Run.</source>
<seg-source><mrk mid="0" mtype="seg">The process ID of a child process, as returned by a previous call to Run.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The process ID of a child process, as returned by a previous call to Run.</mrk></target>
<note>process_id</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The data you wish to output. This may either be text or binary.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The data you wish to output.</mrk> <mrk mid="2" mtype="seg">This may either be text or binary.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The data you wish to output.</mrk> <mrk mid="2" mtype="seg">This may either be text or binary.</mrk></target>
<note>data</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">the number of characters written.</source>
<seg-source><mrk mid="0" mtype="seg">the number of characters written.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">the number of characters written.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">sets the @error flag to non-zero if STDIN was not redirected for the process or other error.</source>
<seg-source><mrk mid="0" mtype="seg">sets the @error flag to non-zero if STDIN was not redirected for the process or other error.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sets the @error flag to non-zero if STDIN was not redirected for the process or other error.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en"><bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> writes to the console standard input stream for a child process, which is normally used by console applications to read input from the user i.e. from the keyboard. During the call to <bpt id="1" ctype="x-a">&lt;a href="Run.htm"></bpt>Run()<ept id="1">&lt;/a></ept> for the child process you wish to write to the STD I/O parameter must have included the value of $STDIN_CHILD (1) for this function to work properly (see the <bpt id="2" ctype="x-a">&lt;a href="Run.htm"></bpt>Run()<ept id="2">&lt;/a></ept> function).</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> writes to the console standard input stream for a child process, which is normally used by console applications to read input from the user i.e. from the keyboard.</mrk> <mrk mid="1" mtype="seg">During the call to <bpt id="1" ctype="x-a">&lt;a href="Run.htm"></bpt>Run()<ept id="1">&lt;/a></ept> for the child process you wish to write to the STD I/O parameter must have included the value of $STDIN_CHILD (1) for this function to work properly (see the <bpt id="2" ctype="x-a">&lt;a href="Run.htm"></bpt>Run()<ept id="2">&lt;/a></ept> function).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> writes to the console standard input stream for a child process, which is normally used by console applications to read input from the user i.e. from the keyboard.</mrk> <mrk mid="1" mtype="seg">During the call to <bpt id="1" ctype="x-a">&lt;a href="Run.htm"></bpt>Run()<ept id="1">&lt;/a></ept> for the child process you wish to write to the STD I/O parameter must have included the value of $STDIN_CHILD (1) for this function to work properly (see the <bpt id="2" ctype="x-a">&lt;a href="Run.htm"></bpt>Run()<ept id="2">&lt;/a></ept> function).</mrk></target>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"> The optional second parameter is the string that you wish <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> to write to the stream. If the function is called with no second argument, <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> closes the stream and invalidates it for further writing.</source>
<seg-source> <mrk mid="0" mtype="seg">The optional second parameter is the string that you wish <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> to write to the stream.</mrk> <mrk mid="1" mtype="seg">If the function is called with no second argument, <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> closes the stream and invalidates it for further writing.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The optional second parameter is the string that you wish <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> to write to the stream.</mrk> <mrk mid="1" mtype="seg">If the function is called with no second argument, <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> closes the stream and invalidates it for further writing.</mrk></target>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en"> The stream is a first-in first-out buffer with an arbitrary limited size; if at any time when this function is called (unless it's being called to close the stream) there is no room for more characters to be written to the stream, the <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> function will block (pause) and not return until the child process closes the stream or reads enough characters from the stream to permit the write procedure to complete. This means that the AutoIt process will be halted, and there will be no processing of hotkeys, GUI messages, etc. until the child process reads from the STDIN stream.</source>
<seg-source> <mrk mid="0" mtype="seg">The stream is a first-in first-out buffer with an arbitrary limited size; if at any time when this function is called (unless it's being called to close the stream) there is no room for more characters to be written to the stream, the <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> function will block (pause) and not return until the child process closes the stream or reads enough characters from the stream to permit the write procedure to complete.</mrk> <mrk mid="1" mtype="seg">This means that the AutoIt process will be halted, and there will be no processing of hotkeys, GUI messages, etc.</mrk> <mrk mid="2" mtype="seg">until the child process reads from the STDIN stream.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The stream is a first-in first-out buffer with an arbitrary limited size; if at any time when this function is called (unless it's being called to close the stream) there is no room for more characters to be written to the stream, the <bpt id="1" ctype="x-a">&lt;a href="StdinWrite.htm"></bpt>StdinWrite()<ept id="1">&lt;/a></ept> function will block (pause) and not return until the child process closes the stream or reads enough characters from the stream to permit the write procedure to complete.</mrk> <mrk mid="1" mtype="seg">This means that the AutoIt process will be halted, and there will be no processing of hotkeys, GUI messages, etc.</mrk> <mrk mid="2" mtype="seg">until the child process reads from the STDIN stream.</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en"> Characters are converted to ANSI before being written.</source>
<seg-source> <mrk mid="0" mtype="seg">Characters are converted to ANSI before being written.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Characters are converted to ANSI before being written.</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en"> Binary data is written as-is. It will not be converted to a string. To print the hex representation of binary data, use the <bpt id="1" ctype="x-a">&lt;a href="String.htm"></bpt>String()<ept id="1">&lt;/a></ept> function to explicitly cast the data to a string.</source>
<seg-source> <mrk mid="0" mtype="seg">Binary data is written as-is.</mrk> <mrk mid="1" mtype="seg">It will not be converted to a string.</mrk> <mrk mid="2" mtype="seg">To print the hex representation of binary data, use the <bpt id="1" ctype="x-a">&lt;a href="String.htm"></bpt>String()<ept id="1">&lt;/a></ept> function to explicitly cast the data to a string.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Binary data is written as-is.</mrk> <mrk mid="1" mtype="seg">It will not be converted to a string.</mrk> <mrk mid="2" mtype="seg">To print the hex representation of binary data, use the <bpt id="1" ctype="x-a">&lt;a href="String.htm"></bpt>String()<ept id="1">&lt;/a></ept> function to explicitly cast the data to a string.</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">sort.exe</source>
<seg-source><mrk mid="0" mtype="seg">sort.exe</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sort.exe</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Write a string of items to be sorted to child sort.exe's Stdin.</source>
<seg-source><mrk mid="0" mtype="seg">Write a string of items to be sorted to child sort.exe's Stdin.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Write a string of items to be sorted to child sort.exe's Stdin.</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">Banana</source>
<seg-source><mrk mid="0" mtype="seg">Banana</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Banana</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">Elephant</source>
<seg-source><mrk mid="0" mtype="seg">Elephant</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Elephant</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">Apple</source>
<seg-source><mrk mid="0" mtype="seg">Apple</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Apple</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Deer</source>
<seg-source><mrk mid="0" mtype="seg">Deer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Deer</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">Car</source>
<seg-source><mrk mid="0" mtype="seg">Car</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Car</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">Calling StdinWrite without a second parameter closes the stream.</source>
<seg-source><mrk mid="0" mtype="seg">Calling StdinWrite without a second parameter closes the stream.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Calling StdinWrite without a second parameter closes the stream.</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">Store the output of StdoutRead to a variable.</source>
<seg-source><mrk mid="0" mtype="seg">Store the output of StdoutRead to a variable.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Store the output of StdoutRead to a variable.</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">Read the Stdout stream of the PID returned by Run.</source>
<seg-source><mrk mid="0" mtype="seg">Read the Stdout stream of the PID returned by Run.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Read the Stdout stream of the PID returned by Run.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">Exit the loop if the process closes or StdoutRead returns an error.</source>
<seg-source><mrk mid="0" mtype="seg">Exit the loop if the process closes or StdoutRead returns an error.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Exit the loop if the process closes or StdoutRead returns an error.</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">The sorted string is:</source>
<seg-source><mrk mid="0" mtype="seg">The sorted string is:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The sorted string is:</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
