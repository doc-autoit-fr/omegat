<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/functions/Assign.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Assigns a variable by name with the data.</source>
<seg-source><mrk mid="0" mtype="seg">Assigns a variable by name with the data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assigns a variable by name with the data.</mrk></target>
<note>Function Assign</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The name of the variable you wish to assign. Cannot be an array element and must only contain letters, digits and underscore characters (as per normal variable naming conventions).</source>
<seg-source><mrk mid="0" mtype="seg">The name of the variable you wish to assign.</mrk> <mrk mid="1" mtype="seg">Cannot be an array element and must only contain letters, digits and underscore characters (as per normal variable naming conventions).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The name of the variable you wish to assign.</mrk> <mrk mid="1" mtype="seg">Cannot be an array element and must only contain letters, digits and underscore characters (as per normal variable naming conventions).</mrk></target>
<note>varname</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en">The data you wish to assign to the variable.</source>
<seg-source><mrk mid="0" mtype="seg">The data you wish to assign to the variable.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The data you wish to assign to the variable.</mrk></target>
<note>data</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> controls the way that variables are assigned (add required options together):</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">controls the way that variables are assigned (add required options together):</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">controls the way that variables are assigned (add required options together):</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $ASSIGN_CREATE (0) = (default) Create variable if required</source>
<seg-source> <mrk mid="0" mtype="seg">    $ASSIGN_CREATE (0) = (default) Create variable if required</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $ASSIGN_CREATE (0) = (default) Create variable if required</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $ASSIGN_FORCELOCAL (1) = Force creation in local scope</source>
<seg-source> <mrk mid="0" mtype="seg">    $ASSIGN_FORCELOCAL (1) = Force creation in local scope</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $ASSIGN_FORCELOCAL (1) = Force creation in local scope</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $ASSIGN_FORCEGLOBAL (2) = Force creation in global scope</source>
<seg-source> <mrk mid="0" mtype="seg">    $ASSIGN_FORCEGLOBAL (2) = Force creation in global scope</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $ASSIGN_FORCEGLOBAL (2) = Force creation in global scope</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">     $ASSIGN_EXISTFAIL (4) = Fail if variable does not already exist</source>
<seg-source> <mrk mid="0" mtype="seg">    $ASSIGN_EXISTFAIL (4) = Fail if variable does not already exist</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $ASSIGN_EXISTFAIL (4) = Fail if variable does not already exist</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"> Constants are defined in AutoItConstants.au3</source>
<seg-source> <mrk mid="0" mtype="seg">Constants are defined in AutoItConstants.au3</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Constants are defined in AutoItConstants.au3</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">1.</source>
<seg-source><mrk mid="0" mtype="seg">1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">0 if unable to create/assign the variable.</source>
<seg-source><mrk mid="0" mtype="seg">0 if unable to create/assign the variable.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">0 if unable to create/assign the variable.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">If there is a need to use <bpt id="1" ctype="x-a">&lt;a href="Assign.htm"></bpt>Assign()<ept id="1">&lt;/a></ept> to create/write to a variable, then in most situations, <bpt id="2" ctype="x-a">&lt;a href="Eval.htm"></bpt>Eval()<ept id="2">&lt;/a></ept> should be used to read the variable and <bpt id="3" ctype="x-a">&lt;a href="IsDeclared.htm"></bpt>IsDeclared()<ept id="3">&lt;/a></ept> should be used to check that the variable exists.</source>
<seg-source><mrk mid="0" mtype="seg">If there is a need to use <bpt id="1" ctype="x-a">&lt;a href="Assign.htm"></bpt>Assign()<ept id="1">&lt;/a></ept> to create/write to a variable, then in most situations, <bpt id="2" ctype="x-a">&lt;a href="Eval.htm"></bpt>Eval()<ept id="2">&lt;/a></ept> should be used to read the variable and <bpt id="3" ctype="x-a">&lt;a href="IsDeclared.htm"></bpt>IsDeclared()<ept id="3">&lt;/a></ept> should be used to check that the variable exists.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If there is a need to use <bpt id="1" ctype="x-a">&lt;a href="Assign.htm"></bpt>Assign()<ept id="1">&lt;/a></ept> to create/write to a variable, then in most situations, <bpt id="2" ctype="x-a">&lt;a href="Eval.htm"></bpt>Eval()<ept id="2">&lt;/a></ept> should be used to read the variable and <bpt id="3" ctype="x-a">&lt;a href="IsDeclared.htm"></bpt>IsDeclared()<ept id="3">&lt;/a></ept> should be used to check that the variable exists.</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">Assign the variable string sString with data.</source>
<seg-source><mrk mid="0" mtype="seg">Assign the variable string sString with data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign the variable string sString with data.</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">sString</source>
<seg-source><mrk mid="0" mtype="seg">sString</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sString</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">This is a string which is declared using the function Assign</source>
<seg-source><mrk mid="0" mtype="seg">This is a string which is declared using the function Assign</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is a string which is declared using the function Assign</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Find the value of the variable string sString and assign to the variable $sEvalString.</source>
<seg-source><mrk mid="0" mtype="seg">Find the value of the variable string sString and assign to the variable $sEvalString.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Find the value of the variable string sString and assign to the variable $sEvalString.</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">sString</source>
<seg-source><mrk mid="0" mtype="seg">sString</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sString</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">Display the value of $sEvalString. This should be the same value as $sString.</source>
<seg-source><mrk mid="0" mtype="seg">Display the value of $sEvalString.</mrk> <mrk mid="1" mtype="seg">This should be the same value as $sString.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the value of $sEvalString.</mrk> <mrk mid="1" mtype="seg">This should be the same value as $sString.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
