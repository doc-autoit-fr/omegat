<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/functions/StringSplit.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Splits up a string into substrings depending on the given delimiters.</source>
<seg-source><mrk mid="0" mtype="seg">Splits up a string into substrings depending on the given delimiters.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Splits up a string into substrings depending on the given delimiters.</mrk></target>
<note>Function StringSplit</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The string to evaluate.</source>
<seg-source><mrk mid="0" mtype="seg">The string to evaluate.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The string to evaluate.</mrk></target>
<note>string</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en">One or more characters to use as delimiters (case sensitive).</source>
<seg-source><mrk mid="0" mtype="seg">One or more characters to use as delimiters (case sensitive).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">One or more characters to use as delimiters (case sensitive).</mrk></target>
<note>delimiters</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"> <bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Changes how the string split works, add multiple flag values together if required:</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Changes how the string split works, add multiple flag values together if required:</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Changes how the string split works, add multiple flag values together if required:</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $STR_CHRSPLIT (0) = each character in the delimiter string will mark where to split the string (default)</source>
<seg-source> <mrk mid="0" mtype="seg">    $STR_CHRSPLIT (0) = each character in the delimiter string will mark where to split the string (default)</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $STR_CHRSPLIT (0) = each character in the delimiter string will mark where to split the string (default)</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $STR_ENTIRESPLIT (1) = entire delimiter string is needed to mark the split</source>
<seg-source> <mrk mid="0" mtype="seg">    $STR_ENTIRESPLIT (1) = entire delimiter string is needed to mark the split</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $STR_ENTIRESPLIT (1) = entire delimiter string is needed to mark the split</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $STR_NOCOUNT (2) = disable the return count in the first element - effectively makes the array 0-based (must use <bpt id="1" ctype="x-a">&lt;a href="UBound.htm"></bpt>UBound()<ept id="1">&lt;/a></ept> to get the size of the array in this case).</source>
<seg-source> <mrk mid="0" mtype="seg">    $STR_NOCOUNT (2) = disable the return count in the first element - effectively makes the array 0-based (must use <bpt id="1" ctype="x-a">&lt;a href="UBound.htm"></bpt>UBound()<ept id="1">&lt;/a></ept> to get the size of the array in this case).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $STR_NOCOUNT (2) = disable the return count in the first element - effectively makes the array 0-based (must use <bpt id="1" ctype="x-a">&lt;a href="UBound.htm"></bpt>UBound()<ept id="1">&lt;/a></ept> to get the size of the array in this case).</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en"> Constants are defined in StringConstants.au3. </source>
<seg-source> <mrk mid="0" mtype="seg">Constants are defined in StringConstants.au3.</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Constants are defined in StringConstants.au3.</mrk> </target>
<note>flag</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">Returns an array, by default the first element ($aArray[0]) contains the number of strings returned, the remaining elements ($aArray[1], $aArray[2], etc.) contain the delimited strings. If the flag parameter is set to $STR_NOCOUNT (2) then the count is not returned in the first element.</source>
<seg-source><mrk mid="0" mtype="seg">Returns an array, by default the first element ($aArray[0]) contains the number of strings returned, the remaining elements ($aArray[1], $aArray[2], etc.) contain the delimited strings.</mrk> <mrk mid="1" mtype="seg">If the flag parameter is set to $STR_NOCOUNT (2) then the count is not returned in the first element.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns an array, by default the first element ($aArray[0]) contains the number of strings returned, the remaining elements ($aArray[1], $aArray[2], etc.) contain the delimited strings.</mrk> <mrk mid="1" mtype="seg">If the flag parameter is set to $STR_NOCOUNT (2) then the count is not returned in the first element.</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en"> If no delimiters were found then the @error flag is set to 1:</source>
<seg-source> <mrk mid="0" mtype="seg">If no delimiters were found then the @error flag is set to 1:</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If no delimiters were found then the @error flag is set to 1:</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en"> If flag is not equal to $STR_NOCOUNT, $aArray[0] is set to 1 and the full string is returned in $aArray[1].</source>
<seg-source> <mrk mid="0" mtype="seg">If flag is not equal to $STR_NOCOUNT, $aArray[0] is set to 1 and the full string is returned in $aArray[1].</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If flag is not equal to $STR_NOCOUNT, $aArray[0] is set to 1 and the full string is returned in $aArray[1].</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en"> If flag is equal to $STR_NOCOUNT, the full string is returned in $aArray[0].</source>
<seg-source> <mrk mid="0" mtype="seg">If flag is equal to $STR_NOCOUNT, the full string is returned in $aArray[0].</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If flag is equal to $STR_NOCOUNT, the full string is returned in $aArray[0].</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">If you use an empty string "" for the delimiters, each character will be returned as an element.</source>
<seg-source><mrk mid="0" mtype="seg">If you use an empty string "" for the delimiters, each character will be returned as an element.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If you use an empty string "" for the delimiters, each character will be returned as an element.</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en"> If the delimiter string contains several characters function behaviour depends on the flag setting. If set to $STR_CHRSPLIT the string will be split at every instance of each of the individual characters in the delimiter - if set to $STR_ENTIRESPLIT then the string will only be split when the entire delimiter string is encountered. See second example below.</source>
<seg-source> <mrk mid="0" mtype="seg">If the delimiter string contains several characters function behaviour depends on the flag setting.</mrk> <mrk mid="1" mtype="seg">If set to $STR_CHRSPLIT the string will be split at every instance of each of the individual characters in the delimiter - if set to $STR_ENTIRESPLIT then the string will only be split when the entire delimiter string is encountered.</mrk> <mrk mid="2" mtype="seg">See second example below.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If the delimiter string contains several characters function behaviour depends on the flag setting.</mrk> <mrk mid="1" mtype="seg">If set to $STR_CHRSPLIT the string will be split at every instance of each of the individual characters in the delimiter - if set to $STR_ENTIRESPLIT then the string will only be split when the entire delimiter string is encountered.</mrk> <mrk mid="2" mtype="seg">See second example below.</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en"> Note that the macro @CRLF is actually a 2 character string, so unless the flag parameter to $STR_ENTIRESPLIT extra blank lines will be generated as the string is split on both @CR and @LF.</source>
<seg-source> <mrk mid="0" mtype="seg">Note that the macro @CRLF is actually a 2 character string, so unless the flag parameter to $STR_ENTIRESPLIT extra blank lines will be generated as the string is split on both @CR and @LF.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Note that the macro @CRLF is actually a 2 character string, so unless the flag parameter to $STR_ENTIRESPLIT extra blank lines will be generated as the string is split on both @CR and @LF.</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="StringSplit.htm"></bpt>StringSplit()<ept id="1">&lt;/a></ept> is very useful as an alternative to <bpt id="2" ctype="x-a">&lt;a href="StringInStr.htm"></bpt>StringInStr()<ept id="2">&lt;/a></ept> as well as a means to populate an array.</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="StringSplit.htm"></bpt>StringSplit()<ept id="1">&lt;/a></ept> is very useful as an alternative to <bpt id="2" ctype="x-a">&lt;a href="StringInStr.htm"></bpt>StringInStr()<ept id="2">&lt;/a></ept> as well as a means to populate an array.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="StringSplit.htm"></bpt>StringSplit()<ept id="1">&lt;/a></ept> is very useful as an alternative to <bpt id="2" ctype="x-a">&lt;a href="StringInStr.htm"></bpt>StringInStr()<ept id="2">&lt;/a></ept> as well as a means to populate an array.</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">Example 1</source>
<seg-source><mrk mid="0" mtype="seg">Example 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 1</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">Mon,Tues,Wed,Thur,Fri,Sat,Sun</source>
<seg-source><mrk mid="0" mtype="seg">Mon,Tues,Wed,Thur,Fri,Sat,Sun</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Mon,Tues,Wed,Thur,Fri,Sat,Sun</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">,</source>
<seg-source><mrk mid="0" mtype="seg">,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">,</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">Split the string of days using the delimiter "," and the default flag value.</source>
<seg-source><mrk mid="0" mtype="seg">Split the string of days using the delimiter "," and the default flag value.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Split the string of days using the delimiter "," and the default flag value.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">Loop through the array returned by StringSplit to display the individual values.</source>
<seg-source><mrk mid="0" mtype="seg">Loop through the array returned by StringSplit to display the individual values.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Loop through the array returned by StringSplit to display the individual values.</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">$aDays[</source>
<seg-source><mrk mid="0" mtype="seg">$aDays[</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aDays[</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">] -</source>
<seg-source><mrk mid="0" mtype="seg">] -</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">] -</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en">Example 2</source>
<seg-source><mrk mid="0" mtype="seg">Example 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 2</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en">This\nline\ncontains\nC-style breaks.</source>
<seg-source><mrk mid="0" mtype="seg">This\nline\ncontains\nC-style breaks.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This\nline\ncontains\nC-style breaks.</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">Define a variable with a string of text.</source>
<seg-source><mrk mid="0" mtype="seg">Define a variable with a string of text.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Define a variable with a string of text.</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">\n</source>
<seg-source><mrk mid="0" mtype="seg">\n</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">\n</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">Pass the variable to StringSplit and using the delimiter "\n".</source>
<seg-source><mrk mid="0" mtype="seg">Pass the variable to StringSplit and using the delimiter "\n".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Pass the variable to StringSplit and using the delimiter "\n".</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">Note that flag parameter is set to $STR_ENTIRESPLIT (1) as it would split at \ or n otherwise.</source>
<seg-source><mrk mid="0" mtype="seg">Note that flag parameter is set to $STR_ENTIRESPLIT (1) as it would split at \ or n otherwise.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note that flag parameter is set to $STR_ENTIRESPLIT (1) as it would split at \ or n otherwise.</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">Loop through the array returned by StringSplit to display the individual values.</source>
<seg-source><mrk mid="0" mtype="seg">Loop through the array returned by StringSplit to display the individual values.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Loop through the array returned by StringSplit to display the individual values.</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">$aArray[</source>
<seg-source><mrk mid="0" mtype="seg">$aArray[</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aArray[</mrk></target>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">] -</source>
<seg-source><mrk mid="0" mtype="seg">] -</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">] -</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">Example 3</source>
<seg-source><mrk mid="0" mtype="seg">Example 3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 3</mrk></target>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">This\nline\ncontains\nC-style breaks.</source>
<seg-source><mrk mid="0" mtype="seg">This\nline\ncontains\nC-style breaks.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This\nline\ncontains\nC-style breaks.</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">Define a variable with a string of text.</source>
<seg-source><mrk mid="0" mtype="seg">Define a variable with a string of text.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Define a variable with a string of text.</mrk></target>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">Pass the variable to StringSplit and using the delimiter "\n".</source>
<seg-source><mrk mid="0" mtype="seg">Pass the variable to StringSplit and using the delimiter "\n".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Pass the variable to StringSplit and using the delimiter "\n".</mrk></target>
</trans-unit>
<trans-unit id="42">
<source xml:lang="en">Note that flag parameter is set to $STR_ENTIRESPLIT (1) as it would split at \ or n otherwise.</source>
<seg-source><mrk mid="0" mtype="seg">Note that flag parameter is set to $STR_ENTIRESPLIT (1) as it would split at \ or n otherwise.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note that flag parameter is set to $STR_ENTIRESPLIT (1) as it would split at \ or n otherwise.</mrk></target>
</trans-unit>
<trans-unit id="43">
<source xml:lang="en">\n</source>
<seg-source><mrk mid="0" mtype="seg">\n</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">\n</mrk></target>
</trans-unit>
<trans-unit id="44">
<source xml:lang="en">Directly access the array index by using array access on expression.</source>
<seg-source><mrk mid="0" mtype="seg">Directly access the array index by using array access on expression.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Directly access the array index by using array access on expression.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
