<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/libfunctions/_FileListToArray.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Lists files and\or folders in a specified folder (Similar to using Dir with the /B Switch)</source>
<seg-source><mrk mid="0" mtype="seg">Lists files and\or folders in a specified folder (Similar to using Dir with the /B Switch)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Lists files and\or folders in a specified folder (Similar to using Dir with the /B Switch)</mrk></target>
<note>Function _FileListToArray</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">Folder to generate filelist for.</source>
<seg-source><mrk mid="0" mtype="seg">Folder to generate filelist for.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Folder to generate filelist for.</mrk></target>
<note>$sFilePath</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> the filter to use, default is *. (* and ? wildcards accepted - See Remarks)</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">the filter to use, default is *.</mrk> <mrk mid="2" mtype="seg">(* and ?</mrk> <mrk mid="3" mtype="seg">wildcards accepted - See Remarks)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">the filter to use, default is *.</mrk> <mrk mid="2" mtype="seg">(* and ?</mrk> <mrk mid="3" mtype="seg">wildcards accepted - See Remarks)</mrk></target>
<note>$sFilter</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> specifies whether to return files folders or both</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">specifies whether to return files folders or both</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">specifies whether to return files folders or both</mrk></target>
<note>$iFlag</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $FLTA_FILESFOLDERS (0) = (Default) Return both files and folders</source>
<seg-source> <mrk mid="0" mtype="seg">    $FLTA_FILESFOLDERS (0) = (Default) Return both files and folders</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FLTA_FILESFOLDERS (0) = (Default) Return both files and folders</mrk></target>
<note>$iFlag</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $FLTA_FILES (1) = Return files only</source>
<seg-source> <mrk mid="0" mtype="seg">    $FLTA_FILES (1) = Return files only</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FLTA_FILES (1) = Return files only</mrk></target>
<note>$iFlag</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $FLTA_FOLDERS (2) = Return Folders only</source>
<seg-source> <mrk mid="0" mtype="seg">    $FLTA_FOLDERS (2) = Return Folders only</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FLTA_FOLDERS (2) = Return Folders only</mrk></target>
<note>$iFlag</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">     Constants are defined in FileConstants.au3</source>
<seg-source> <mrk mid="0" mtype="seg">    Constants are defined in FileConstants.au3</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    Constants are defined in FileConstants.au3</mrk></target>
<note>$iFlag</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> If True the full path is appended to the file\folder path, otherwise it is relative to the $sFilePath folder. Default is False.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">If True the full path is appended to the file\folder path, otherwise it is relative to the $sFilePath folder.</mrk> <mrk mid="2" mtype="seg">Default is False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">If True the full path is appended to the file\folder path, otherwise it is relative to the $sFilePath folder.</mrk> <mrk mid="2" mtype="seg">Default is False.</mrk></target>
<note>$bReturnPath</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">A one-dimensional array.</source>
<seg-source><mrk mid="0" mtype="seg">A one-dimensional array.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A one-dimensional array.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">     $aArray[0] = Number of Files\Folders returned</source>
<seg-source> <mrk mid="0" mtype="seg">    $aArray[0] = Number of Files\Folders returned</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $aArray[0] = Number of Files\Folders returned</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">     $aArray[1] = 1st File\Folder</source>
<seg-source> <mrk mid="0" mtype="seg">    $aArray[1] = 1st File\Folder</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $aArray[1] = 1st File\Folder</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">     $aArray[2] = 2nd File\Folder</source>
<seg-source> <mrk mid="0" mtype="seg">    $aArray[2] = 2nd File\Folder</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $aArray[2] = 2nd File\Folder</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">     $aArray[3] = 3rd File\Folder</source>
<seg-source> <mrk mid="0" mtype="seg">    $aArray[3] = 3rd File\Folder</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $aArray[3] = 3rd File\Folder</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">     $aArray[n] = nth File\Folder</source>
<seg-source> <mrk mid="0" mtype="seg">    $aArray[n] = nth File\Folder</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $aArray[n] = nth File\Folder</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">1 - Folder not found or invalid</source>
<seg-source><mrk mid="0" mtype="seg">1 - Folder not found or invalid</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1 - Folder not found or invalid</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en"> 2 - Invalid $sFilter</source>
<seg-source> <mrk mid="0" mtype="seg">2 - Invalid $sFilter</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 - Invalid $sFilter</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en"> 3 - Invalid $iFlag</source>
<seg-source> <mrk mid="0" mtype="seg">3 - Invalid $iFlag</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">3 - Invalid $iFlag</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en"> 4 - No File(s) Found</source>
<seg-source> <mrk mid="0" mtype="seg">4 - No File(s) Found</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">4 - No File(s) Found</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">This function uses the Windows OS to return subfolders matching the specified filter. This works perfectly for simple filters, using a complex filter with multiple wildcards may return some unexpected results (for example *test*.* will match both testX and testX.X subfolders). If this occurs, the <bpt id="1" ctype="x-a">&lt;a href="_FileListToArrayRec.htm"></bpt>_FileListToArrayRec()<ept id="1">&lt;/a></ept> function might be better suited as it compares all subfolders to the specified filter using a RegEx, although the time taken to run the function can be noticeably greater</source>
<seg-source><mrk mid="0" mtype="seg">This function uses the Windows OS to return subfolders matching the specified filter.</mrk> <mrk mid="1" mtype="seg">This works perfectly for simple filters, using a complex filter with multiple wildcards may return some unexpected results (for example *test*.* will match both testX and testX.</mrk><mrk mid="2" mtype="seg">X subfolders).</mrk> <mrk mid="3" mtype="seg">If this occurs, the <bpt id="1" ctype="x-a">&lt;a href="_FileListToArrayRec.htm"></bpt>_FileListToArrayRec()<ept id="1">&lt;/a></ept> function might be better suited as it compares all subfolders to the specified filter using a RegEx, although the time taken to run the function can be noticeably greater</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This function uses the Windows OS to return subfolders matching the specified filter.</mrk> <mrk mid="1" mtype="seg">This works perfectly for simple filters, using a complex filter with multiple wildcards may return some unexpected results (for example *test*.* will match both testX and testX.</mrk><mrk mid="2" mtype="seg">X subfolders).</mrk> <mrk mid="3" mtype="seg">If this occurs, the <bpt id="1" ctype="x-a">&lt;a href="_FileListToArrayRec.htm"></bpt>_FileListToArrayRec()<ept id="1">&lt;/a></ept> function might be better suited as it compares all subfolders to the specified filter using a RegEx, although the time taken to run the function can be noticeably greater</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en"> See <bpt id="1" ctype="x-a">&lt;a href="../functions/FileFindFirstFile.htm"></bpt>FileFindFirstFile()<ept id="1">&lt;/a></ept> for a discussion about wildcards.</source>
<seg-source> <mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-a">&lt;a href="../functions/FileFindFirstFile.htm"></bpt>FileFindFirstFile()<ept id="1">&lt;/a></ept> for a discussion about wildcards.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-a">&lt;a href="../functions/FileFindFirstFile.htm"></bpt>FileFindFirstFile()<ept id="1">&lt;/a></ept> for a discussion about wildcards.</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en">Example 1</source>
<seg-source><mrk mid="0" mtype="seg">Example 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 1</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en">List all the files and folders in the desktop directory using the default parameters.</source>
<seg-source><mrk mid="0" mtype="seg">List all the files and folders in the desktop directory using the default parameters.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">List all the files and folders in the desktop directory using the default parameters.</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">*</source>
<seg-source><mrk mid="0" mtype="seg">*</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">*</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">Path was invalid.</source>
<seg-source><mrk mid="0" mtype="seg">Path was invalid.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Path was invalid.</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">No file(s) were found.</source>
<seg-source><mrk mid="0" mtype="seg">No file(s) were found.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">No file(s) were found.</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">Display the results returned by _FileListToArray.</source>
<seg-source><mrk mid="0" mtype="seg">Display the results returned by _FileListToArray.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the results returned by _FileListToArray.</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">$aFileList</source>
<seg-source><mrk mid="0" mtype="seg">$aFileList</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aFileList</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">Example 2</source>
<seg-source><mrk mid="0" mtype="seg">Example 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 2</mrk></target>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">List all the files and folders in the desktop directory using the default parameters and return the full path.</source>
<seg-source><mrk mid="0" mtype="seg">List all the files and folders in the desktop directory using the default parameters and return the full path.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">List all the files and folders in the desktop directory using the default parameters and return the full path.</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">Path was invalid.</source>
<seg-source><mrk mid="0" mtype="seg">Path was invalid.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Path was invalid.</mrk></target>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">No file(s) were found.</source>
<seg-source><mrk mid="0" mtype="seg">No file(s) were found.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">No file(s) were found.</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">Display the results returned by _FileListToArray.</source>
<seg-source><mrk mid="0" mtype="seg">Display the results returned by _FileListToArray.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the results returned by _FileListToArray.</mrk></target>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">$aFileList</source>
<seg-source><mrk mid="0" mtype="seg">$aFileList</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$aFileList</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
