<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/libfunctions/_WinAPI_PathFindNextComponent.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Parses a path and returns the portion of that path that follows the first backslash</source>
<seg-source><mrk mid="0" mtype="seg">Parses a path and returns the portion of that path that follows the first backslash</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parses a path and returns the portion of that path that follows the first backslash</mrk></target>
<note>Function _WinAPI_PathFindNextComponent</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The path to parse. Path components are delimited by backslashes. For instance, the path</source>
<seg-source><mrk mid="0" mtype="seg">The path to parse.</mrk> <mrk mid="1" mtype="seg">Path components are delimited by backslashes.</mrk> <mrk mid="2" mtype="seg">For instance, the path</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The path to parse.</mrk> <mrk mid="1" mtype="seg">Path components are delimited by backslashes.</mrk> <mrk mid="2" mtype="seg">For instance, the path</mrk></target>
<note>$sFilePath</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"> "c:\path1\path2\file.txt" has four components: c:, path1, path2, and file.txt.</source>
<seg-source> <mrk mid="0" mtype="seg">"c:\path1\path2\file.txt" has four components: c:, path1, path2, and file.txt.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">"c:\path1\path2\file.txt" has four components: c:, path1, path2, and file.txt.</mrk></target>
<note>$sFilePath</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">The truncated path.</source>
<seg-source><mrk mid="0" mtype="seg">The truncated path.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The truncated path.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">Empty string and sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">Empty string and sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Empty string and sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">This function walks a path string until it encounters a backslash ("\"), ignores everything up to that point</source>
<seg-source><mrk mid="0" mtype="seg">This function walks a path string until it encounters a backslash ("\"), ignores everything up to that point</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This function walks a path string until it encounters a backslash ("\"), ignores everything up to that point</mrk></target>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"> including the backslash, and returns the rest of the path. Therefore, if a path begins with a backslash (such as \path1\path2),</source>
<seg-source> <mrk mid="0" mtype="seg">including the backslash, and returns the rest of the path.</mrk> <mrk mid="1" mtype="seg">Therefore, if a path begins with a backslash (such as \path1\path2),</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">including the backslash, and returns the rest of the path.</mrk> <mrk mid="1" mtype="seg">Therefore, if a path begins with a backslash (such as \path1\path2),</mrk></target>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en"> the function simply removes the initial backslash and returns the rest (path1\path2).</source>
<seg-source> <mrk mid="0" mtype="seg">the function simply removes the initial backslash and returns the rest (path1\path2).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">the function simply removes the initial backslash and returns the rest (path1\path2).</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">See Also</source>
<seg-source><mrk mid="0" mtype="seg">See Also</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">See Also</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(PathFindNextComponent);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>PathFindNextComponent<ept id="1">&lt;/a></ept> in MSDN Library.</source>
<seg-source><mrk mid="0" mtype="seg">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(PathFindNextComponent);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>PathFindNextComponent<ept id="1">&lt;/a></ept> in MSDN Library.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(PathFindNextComponent);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>PathFindNextComponent<ept id="1">&lt;/a></ept> in MSDN Library.</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">Path = "</source>
<seg-source><mrk mid="0" mtype="seg">Path = "</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Path = "</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">" -> @error =</source>
<seg-source><mrk mid="0" mtype="seg">" -> @error =</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">" -> @error =</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
