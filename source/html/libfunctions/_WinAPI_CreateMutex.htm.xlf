<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="html/libfunctions/_WinAPI_CreateMutex.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Creates or opens a named or unnamed mutex object</source>
<seg-source><mrk mid="0" mtype="seg">Creates or opens a named or unnamed mutex object</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Creates or opens a named or unnamed mutex object</mrk></target>
<note>Function _WinAPI_CreateMutex</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">The name of the mutex object. Name comparisons are case sensitive.</source>
<seg-source><mrk mid="0" mtype="seg">The name of the mutex object.</mrk> <mrk mid="1" mtype="seg">Name comparisons are case sensitive.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The name of the mutex object.</mrk> <mrk mid="1" mtype="seg">Name comparisons are case sensitive.</mrk></target>
<note>$sMutex</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Specifies whether the calling process obtains the initial ownership of the mutex object, valid values:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Specifies whether the calling process obtains the initial ownership of the mutex object, valid values:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Specifies whether the calling process obtains the initial ownership of the mutex object, valid values:</mrk></target>
<note>$bInitial</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en">     True - The calling thread obtains initial ownership of the mutex object (Default).</source>
<seg-source> <mrk mid="0" mtype="seg">    True - The calling thread obtains initial ownership of the mutex object (Default).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    True - The calling thread obtains initial ownership of the mutex object (Default).</mrk></target>
<note>$bInitial</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     False - The calling thread does not obtain ownership of the mutex object.</source>
<seg-source> <mrk mid="0" mtype="seg">    False - The calling thread does not obtain ownership of the mutex object.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    False - The calling thread does not obtain ownership of the mutex object.</mrk></target>
<note>$bInitial</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new mutex.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">$tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new mutex.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">$tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new mutex.</mrk></target>
<note>$tSecurity</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en"> If this parameter is 0 (Default), the mutex gets a default security descriptor.</source>
<seg-source> <mrk mid="0" mtype="seg">If this parameter is 0 (Default), the mutex gets a default security descriptor.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If this parameter is 0 (Default), the mutex gets a default security descriptor.</mrk></target>
<note>$tSecurity</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">The handle to the newly created mutex object.</source>
<seg-source><mrk mid="0" mtype="seg">The handle to the newly created mutex object.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The handle to the newly created mutex object.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en"> 0, call <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_GetLastError.htm"></bpt>_WinAPI_GetLastError()<ept id="1">&lt;/a></ept> to get extended error information. </source>
<seg-source> <mrk mid="0" mtype="seg">0, call <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_GetLastError.htm"></bpt>_WinAPI_GetLastError()<ept id="1">&lt;/a></ept> to get extended error information.</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">0, call <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_GetLastError.htm"></bpt>_WinAPI_GetLastError()<ept id="1">&lt;/a></ept> to get extended error information.</mrk> </target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">If the mutex is a named mutex and the object existed before this function call, the return value is a handle to the existing object, <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_GetLastError.htm"></bpt>_WinAPI_GetLastError()<ept id="1">&lt;/a></ept> returns ERROR_ALREADY_EXISTS (183), $bInitial is ignored, and the calling thread is not granted ownership.</source>
<seg-source><mrk mid="0" mtype="seg">If the mutex is a named mutex and the object existed before this function call, the return value is a handle to the existing object, <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_GetLastError.htm"></bpt>_WinAPI_GetLastError()<ept id="1">&lt;/a></ept> returns ERROR_ALREADY_EXISTS (183), $bInitial is ignored, and the calling thread is not granted ownership.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If the mutex is a named mutex and the object existed before this function call, the return value is a handle to the existing object, <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_GetLastError.htm"></bpt>_WinAPI_GetLastError()<ept id="1">&lt;/a></ept> returns ERROR_ALREADY_EXISTS (183), $bInitial is ignored, and the calling thread is not granted ownership.</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en"> However, if the caller has limited access rights, the function will fail with ERROR_ACCESS_DENIED (5) and the caller should use the <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_OpenMutex.htm"></bpt>_WinAPI_OpenMutex()<ept id="1">&lt;/a></ept> function.</source>
<seg-source> <mrk mid="0" mtype="seg">However, if the caller has limited access rights, the function will fail with ERROR_ACCESS_DENIED (5) and the caller should use the <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_OpenMutex.htm"></bpt>_WinAPI_OpenMutex()<ept id="1">&lt;/a></ept> function.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">However, if the caller has limited access rights, the function will fail with ERROR_ACCESS_DENIED (5) and the caller should use the <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_OpenMutex.htm"></bpt>_WinAPI_OpenMutex()<ept id="1">&lt;/a></ept> function.</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en"> Any process can specify the mutex-object handle in a call to one of the wait functions.</source>
<seg-source> <mrk mid="0" mtype="seg">Any process can specify the mutex-object handle in a call to one of the wait functions.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Any process can specify the mutex-object handle in a call to one of the wait functions.</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en"> The single-object wait functions return when the state of the specified object is signaled.</source>
<seg-source> <mrk mid="0" mtype="seg">The single-object wait functions return when the state of the specified object is signaled.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The single-object wait functions return when the state of the specified object is signaled.</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en"> The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled.</source>
<seg-source> <mrk mid="0" mtype="seg">The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled.</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en"> When a wait function returns, the waiting thread is released to continue its execution.</source>
<seg-source> <mrk mid="0" mtype="seg">When a wait function returns, the waiting thread is released to continue its execution.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">When a wait function returns, the waiting thread is released to continue its execution.</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en"> Two or more processes can call <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_CreateMutex.htm"></bpt>_WinAPI_CreateMutex()<ept id="1">&lt;/a></ept> to create the same named mutex.</source>
<seg-source> <mrk mid="0" mtype="seg">Two or more processes can call <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_CreateMutex.htm"></bpt>_WinAPI_CreateMutex()<ept id="1">&lt;/a></ept> to create the same named mutex.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Two or more processes can call <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_CreateMutex.htm"></bpt>_WinAPI_CreateMutex()<ept id="1">&lt;/a></ept> to create the same named mutex.</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en"> The first process actually creates the mutex, and subsequent processes with sufficient access rights simply open a handle to the existing mutex.</source>
<seg-source> <mrk mid="0" mtype="seg">The first process actually creates the mutex, and subsequent processes with sufficient access rights simply open a handle to the existing mutex.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The first process actually creates the mutex, and subsequent processes with sufficient access rights simply open a handle to the existing mutex.</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en"> This enables multiple processes to get handles of the same mutex, while relieving the user of the responsibility of ensuring that the creating process is started first.</source>
<seg-source> <mrk mid="0" mtype="seg">This enables multiple processes to get handles of the same mutex, while relieving the user of the responsibility of ensuring that the creating process is started first.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">This enables multiple processes to get handles of the same mutex, while relieving the user of the responsibility of ensuring that the creating process is started first.</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en"> When using this technique, you should set the $bInitial parameter to False; otherwise, it can be difficult to be certain which process has initial ownership.</source>
<seg-source> <mrk mid="0" mtype="seg">When using this technique, you should set the $bInitial parameter to False; otherwise, it can be difficult to be certain which process has initial ownership.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">When using this technique, you should set the $bInitial parameter to False; otherwise, it can be difficult to be certain which process has initial ownership.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en"> Use the <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_CloseHandle.htm"></bpt>_WinAPI_CloseHandle()<ept id="1">&lt;/a></ept> function to close the handle.</source>
<seg-source> <mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_CloseHandle.htm"></bpt>_WinAPI_CloseHandle()<ept id="1">&lt;/a></ept> function to close the handle.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Use the <bpt id="1" ctype="x-a">&lt;a href="_WinAPI_CloseHandle.htm"></bpt>_WinAPI_CloseHandle()<ept id="1">&lt;/a></ept> function to close the handle.</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en"> The system closes the handle automatically when the process terminates.</source>
<seg-source> <mrk mid="0" mtype="seg">The system closes the handle automatically when the process terminates.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The system closes the handle automatically when the process terminates.</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en"> The mutex object is destroyed when its last handle has been closed.</source>
<seg-source> <mrk mid="0" mtype="seg">The mutex object is destroyed when its last handle has been closed.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The mutex object is destroyed when its last handle has been closed.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">See Also</source>
<seg-source><mrk mid="0" mtype="seg">See Also</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">See Also</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(CreateMutex);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>CreateMutex<ept id="1">&lt;/a></ept> in MSDN Library.</source>
<seg-source><mrk mid="0" mtype="seg">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(CreateMutex);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>CreateMutex<ept id="1">&lt;/a></ept> in MSDN Library.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Search <bpt id="1" ctype="x-a">&lt;a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;amp;l=EN-US&amp;amp;k=k(CreateMutex);k(DevLang-C);k(TargetOS-WINDOWS)&amp;amp;rd=true"></bpt>CreateMutex<ept id="1">&lt;/a></ept> in MSDN Library.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
