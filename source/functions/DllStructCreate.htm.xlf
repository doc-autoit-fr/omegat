<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="functions/DllStructCreate.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Creates a C/C++ style structure to be used in DllCall.</source>
<seg-source><mrk mid="0" mtype="seg">Creates a C/C++ style structure to be used in DllCall.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Creates a C/C++ style structure to be used in DllCall.</mrk></target>
<note>Function DllStructCreate</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">A string representing the structure to create (See Remarks).</source>
<seg-source><mrk mid="0" mtype="seg">A string representing the structure to create (See Remarks).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">A string representing the structure to create (See Remarks).</mrk></target>
<note>Struct</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> If supplied the struct will not allocate memory but use the pointer supplied.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">If supplied the struct will not allocate memory but use the pointer supplied.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">If supplied the struct will not allocate memory but use the pointer supplied.</mrk></target>
<note>Pointer</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">a variable for use with DllStruct calls.</source>
<seg-source><mrk mid="0" mtype="seg">a variable for use with DllStruct calls.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">a variable for use with DllStruct calls.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">1 = Variable passed to DllStructCreate was not a string.</source>
<seg-source><mrk mid="0" mtype="seg">1 = Variable passed to DllStructCreate was not a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1 = Variable passed to DllStructCreate was not a string.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"> 2 = There is an unknown Data Type in the string passed.</source>
<seg-source> <mrk mid="0" mtype="seg">2 = There is an unknown Data Type in the string passed.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 = There is an unknown Data Type in the string passed.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en"> 3 = Failed to allocate the memory needed for the struct, or Pointer = 0.</source>
<seg-source> <mrk mid="0" mtype="seg">3 = Failed to allocate the memory needed for the struct, or Pointer = 0.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">3 = Failed to allocate the memory needed for the struct, or Pointer = 0.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en"> 4 = Error allocating memory for the passed string.</source>
<seg-source> <mrk mid="0" mtype="seg">4 = Error allocating memory for the passed string.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">4 = Error allocating memory for the passed string.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>Type<ept id="1">&lt;/strong></ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>Type<ept id="1">&lt;/strong></ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>Type<ept id="1">&lt;/strong></ept></mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>Details<ept id="1">&lt;/strong></ept></source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>Details<ept id="1">&lt;/strong></ept></mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>Details<ept id="1">&lt;/strong></ept></mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">BYTE</source>
<seg-source><mrk mid="0" mtype="seg">BYTE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">BYTE</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">8bit(1byte) unsigned char</source>
<seg-source><mrk mid="0" mtype="seg">8bit(1byte) unsigned char</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">8bit(1byte) unsigned char</mrk></target>
<note>BYTE</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">BOOLEAN</source>
<seg-source><mrk mid="0" mtype="seg">BOOLEAN</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">BOOLEAN</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">8bit(1byte) unsigned char</source>
<seg-source><mrk mid="0" mtype="seg">8bit(1byte) unsigned char</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">8bit(1byte) unsigned char</mrk></target>
<note>BOOLEAN</note>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">CHAR</source>
<seg-source><mrk mid="0" mtype="seg">CHAR</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">CHAR</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">8bit(1byte) ASCII char</source>
<seg-source><mrk mid="0" mtype="seg">8bit(1byte) ASCII char</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">8bit(1byte) ASCII char</mrk></target>
<note>CHAR</note>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">WCHAR</source>
<seg-source><mrk mid="0" mtype="seg">WCHAR</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">WCHAR</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">16bit(2byte) UNICODE wide char</source>
<seg-source><mrk mid="0" mtype="seg">16bit(2byte) UNICODE wide char</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">16bit(2byte) UNICODE wide char</mrk></target>
<note>WCHAR</note>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">SHORT</source>
<seg-source><mrk mid="0" mtype="seg">SHORT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">SHORT</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">16bit(2bytes) signed integer</source>
<seg-source><mrk mid="0" mtype="seg">16bit(2bytes) signed integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">16bit(2bytes) signed integer</mrk></target>
<note>SHORT</note>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">USHORT</source>
<seg-source><mrk mid="0" mtype="seg">USHORT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">USHORT</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">16bit(2bytes) unsigned integer</source>
<seg-source><mrk mid="0" mtype="seg">16bit(2bytes) unsigned integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">16bit(2bytes) unsigned integer</mrk></target>
<note>USHORT</note>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">WORD</source>
<seg-source><mrk mid="0" mtype="seg">WORD</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">WORD</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">16bit(2bytes) unsigned integer</source>
<seg-source><mrk mid="0" mtype="seg">16bit(2bytes) unsigned integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">16bit(2bytes) unsigned integer</mrk></target>
<note>WORD</note>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en">INT</source>
<seg-source><mrk mid="0" mtype="seg">INT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">INT</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en">32bit(4bytes) signed integer</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) signed integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) signed integer</mrk></target>
<note>INT</note>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">LONG</source>
<seg-source><mrk mid="0" mtype="seg">LONG</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">LONG</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">32bit(4bytes) signed integer</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) signed integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) signed integer</mrk></target>
<note>LONG</note>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">BOOL</source>
<seg-source><mrk mid="0" mtype="seg">BOOL</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">BOOL</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">32bit(4bytes) signed integer</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) signed integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) signed integer</mrk></target>
<note>BOOL</note>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">UINT</source>
<seg-source><mrk mid="0" mtype="seg">UINT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UINT</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">32bit(4bytes) unsigned integer</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) unsigned integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) unsigned integer</mrk></target>
<note>UINT</note>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">ULONG</source>
<seg-source><mrk mid="0" mtype="seg">ULONG</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ULONG</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">32bit(4bytes) unsigned integer</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) unsigned integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) unsigned integer</mrk></target>
<note>ULONG</note>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">DWORD</source>
<seg-source><mrk mid="0" mtype="seg">DWORD</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">DWORD</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">32bit(4bytes) unsigned integer</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) unsigned integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) unsigned integer</mrk></target>
<note>DWORD</note>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">INT64</source>
<seg-source><mrk mid="0" mtype="seg">INT64</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">INT64</mrk></target>
</trans-unit>
<trans-unit id="42">
<source xml:lang="en">64bit(8bytes) signed integer</source>
<seg-source><mrk mid="0" mtype="seg">64bit(8bytes) signed integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">64bit(8bytes) signed integer</mrk></target>
<note>INT64</note>
</trans-unit>
<trans-unit id="43">
<source xml:lang="en">UINT64</source>
<seg-source><mrk mid="0" mtype="seg">UINT64</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UINT64</mrk></target>
</trans-unit>
<trans-unit id="44">
<source xml:lang="en">64bit(8bytes) unsigned integer</source>
<seg-source><mrk mid="0" mtype="seg">64bit(8bytes) unsigned integer</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">64bit(8bytes) unsigned integer</mrk></target>
<note>UINT64</note>
</trans-unit>
<trans-unit id="45">
<source xml:lang="en">PTR</source>
<seg-source><mrk mid="0" mtype="seg">PTR</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">PTR</mrk></target>
</trans-unit>
<trans-unit id="46">
<source xml:lang="en">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</source>
<seg-source><mrk mid="0" mtype="seg">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</mrk></target>
<note>PTR</note>
</trans-unit>
<trans-unit id="47">
<source xml:lang="en">HWND</source>
<seg-source><mrk mid="0" mtype="seg">HWND</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">HWND</mrk></target>
</trans-unit>
<trans-unit id="48">
<source xml:lang="en">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</source>
<seg-source><mrk mid="0" mtype="seg">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</mrk></target>
<note>HWND</note>
</trans-unit>
<trans-unit id="49">
<source xml:lang="en">HANDLE</source>
<seg-source><mrk mid="0" mtype="seg">HANDLE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">HANDLE</mrk></target>
</trans-unit>
<trans-unit id="50">
<source xml:lang="en">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</source>
<seg-source><mrk mid="0" mtype="seg">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</mrk></target>
<note>HANDLE</note>
</trans-unit>
<trans-unit id="51">
<source xml:lang="en">FLOAT</source>
<seg-source><mrk mid="0" mtype="seg">FLOAT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">FLOAT</mrk></target>
</trans-unit>
<trans-unit id="52">
<source xml:lang="en">32bit(4bytes) floating point</source>
<seg-source><mrk mid="0" mtype="seg">32bit(4bytes) floating point</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32bit(4bytes) floating point</mrk></target>
<note>FLOAT</note>
</trans-unit>
<trans-unit id="53">
<source xml:lang="en">DOUBLE</source>
<seg-source><mrk mid="0" mtype="seg">DOUBLE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">DOUBLE</mrk></target>
</trans-unit>
<trans-unit id="54">
<source xml:lang="en">64bit(8bytes) floating point</source>
<seg-source><mrk mid="0" mtype="seg">64bit(8bytes) floating point</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">64bit(8bytes) floating point</mrk></target>
<note>DOUBLE</note>
</trans-unit>
<trans-unit id="55">
<source xml:lang="en">INT_PTR, LONG_PTR, LRESULT, LPARAM</source>
<seg-source><mrk mid="0" mtype="seg">INT_PTR, LONG_PTR, LRESULT, LPARAM</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">INT_PTR, LONG_PTR, LRESULT, LPARAM</mrk></target>
</trans-unit>
<trans-unit id="56">
<source xml:lang="en">32 or 64bit signed integer (depending on if the x86 or x64 version of AutoIt is used)</source>
<seg-source><mrk mid="0" mtype="seg">32 or 64bit signed integer (depending on if the x86 or x64 version of AutoIt is used)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32 or 64bit signed integer (depending on if the x86 or x64 version of AutoIt is used)</mrk></target>
<note>INT_PTR, LONG_PTR, LRESULT, LPARAM</note>
</trans-unit>
<trans-unit id="57">
<source xml:lang="en">UINT_PTR, ULONG_PTR, DWORD_PTR, WPARAM</source>
<seg-source><mrk mid="0" mtype="seg">UINT_PTR, ULONG_PTR, DWORD_PTR, WPARAM</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UINT_PTR, ULONG_PTR, DWORD_PTR, WPARAM</mrk></target>
</trans-unit>
<trans-unit id="58">
<source xml:lang="en">32 or 64bit unsigned integer (depending on if the x86 or x64 version of AutoIt is used)</source>
<seg-source><mrk mid="0" mtype="seg">32 or 64bit unsigned integer (depending on if the x86 or x64 version of AutoIt is used)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">32 or 64bit unsigned integer (depending on if the x86 or x64 version of AutoIt is used)</mrk></target>
<note>UINT_PTR, ULONG_PTR, DWORD_PTR, WPARAM</note>
</trans-unit>
<trans-unit id="59">
<source xml:lang="en">STRUCT</source>
<seg-source><mrk mid="0" mtype="seg">STRUCT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">STRUCT</mrk></target>
</trans-unit>
<trans-unit id="60">
<source xml:lang="en">The following datatypes will be align according to C declaration rules. See below.</source>
<seg-source><mrk mid="0" mtype="seg">The following datatypes will be align according to C declaration rules.</mrk> <mrk mid="1" mtype="seg">See below.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The following datatypes will be align according to C declaration rules.</mrk> <mrk mid="1" mtype="seg">See below.</mrk></target>
<note>STRUCT</note>
</trans-unit>
<trans-unit id="61">
<source xml:lang="en">ENDSTRUCT</source>
<seg-source><mrk mid="0" mtype="seg">ENDSTRUCT</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ENDSTRUCT</mrk></target>
</trans-unit>
<trans-unit id="62">
<source xml:lang="en">End of the collection datatypes. Padding can occurs see below.</source>
<seg-source><mrk mid="0" mtype="seg">End of the collection datatypes.</mrk> <mrk mid="1" mtype="seg">Padding can occurs see below.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">End of the collection datatypes.</mrk> <mrk mid="1" mtype="seg">Padding can occurs see below.</mrk></target>
<note>ENDSTRUCT</note>
</trans-unit>
<trans-unit id="63">
<source xml:lang="en">ALIGN</source>
<seg-source><mrk mid="0" mtype="seg">ALIGN</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ALIGN</mrk></target>
</trans-unit>
<trans-unit id="64">
<source xml:lang="en">n bytes boundary where datatype must be aligned.</source>
<seg-source><mrk mid="0" mtype="seg">n bytes boundary where datatype must be aligned.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">n bytes boundary where datatype must be aligned.</mrk></target>
<note>ALIGN</note>
</trans-unit>
<trans-unit id="65">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="66">
<source xml:lang="en">Each data type must be separated by a semi-colon ';'.</source>
<seg-source><mrk mid="0" mtype="seg">Each data type must be separated by a semi-colon ';'.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Each data type must be separated by a semi-colon ';'.</mrk></target>
</trans-unit>
<trans-unit id="67">
<source xml:lang="en"> Create arrays by adding '[size]' after the data type: <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;char[128]")</source>
<seg-source> <mrk mid="0" mtype="seg">Create arrays by adding '[size]' after the data type:</mrk> <mrk mid="1" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;char[128]")</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Create arrays by adding '[size]' after the data type:</mrk> <mrk mid="1" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;char[128]")</mrk></target>
</trans-unit>
<trans-unit id="68">
<source xml:lang="en"> An elementname can be added similar to a C-style declaration: <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int n;char buffer[128]").</source>
<seg-source> <mrk mid="0" mtype="seg">An elementname can be added similar to a C-style declaration:</mrk> <mrk mid="1" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int n;char buffer[128]").</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">An elementname can be added similar to a C-style declaration:</mrk> <mrk mid="1" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int n;char buffer[128]").</mrk></target>
</trans-unit>
<trans-unit id="69">
<source xml:lang="en"> This dataname can be used in place of the element in other DllStruct... functions. The dataname must be alphanumeric or an underscore.</source>
<seg-source> <mrk mid="0" mtype="seg">This dataname can be used in place of the element in other DllStruct... functions.</mrk> <mrk mid="1" mtype="seg">The dataname must be alphanumeric or an underscore.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">This dataname can be used in place of the element in other DllStruct... functions.</mrk> <mrk mid="1" mtype="seg">The dataname must be alphanumeric or an underscore.</mrk></target>
</trans-unit>
<trans-unit id="70">
<source xml:lang="en"> If a collection of datatypes is defined as in a "struct{}" in C declaration, the "STRUCT; ...; ENDSTRUCT;" must be used.</source>
<seg-source> <mrk mid="0" mtype="seg">If a collection of datatypes is defined as in a "struct{}" in C declaration, the "STRUCT; ...;</mrk> <mrk mid="1" mtype="seg">ENDSTRUCT;" must be used.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If a collection of datatypes is defined as in a "struct{}" in C declaration, the "STRUCT; ...;</mrk> <mrk mid="1" mtype="seg">ENDSTRUCT;" must be used.</mrk></target>
</trans-unit>
<trans-unit id="71">
<source xml:lang="en"> This needs to be done to respect alignment inside the entire structure creation. No need if all datatypes are in the defined structure as an implicit structure alignment is done.</source>
<seg-source> <mrk mid="0" mtype="seg">This needs to be done to respect alignment inside the entire structure creation.</mrk> <mrk mid="1" mtype="seg">No need if all datatypes are in the defined structure as an implicit structure alignment is done.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">This needs to be done to respect alignment inside the entire structure creation.</mrk> <mrk mid="1" mtype="seg">No need if all datatypes are in the defined structure as an implicit structure alignment is done.</mrk></target>
</trans-unit>
<trans-unit id="72">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;STRUCT;ptr;int;ENDSTRUCT;int")    ; structure is 32 bytes under a Windows 64-bit and 16 under Windows 32-bit</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;STRUCT;ptr;int;ENDSTRUCT;int")    ; structure is 32 bytes under a Windows 64-bit and 16 under Windows 32-bit</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;STRUCT;ptr;int;ENDSTRUCT;int")    ; structure is 32 bytes under a Windows 64-bit and 16 under Windows 32-bit</mrk></target>
</trans-unit>
<trans-unit id="73">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;ptr;int;int")    ; structure is 24 bytes under a Windows 64-bit and 16 under Windows 32-bit</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;ptr;int;int")    ; structure is 24 bytes under a Windows 64-bit and 16 under Windows 32-bit</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("int;ptr;int;int")    ; structure is 24 bytes under a Windows 64-bit and 16 under Windows 32-bit</mrk></target>
</trans-unit>
<trans-unit id="74">
<source xml:lang="en"> To use a different alignment prefix the structure with the align keyword. The default value for n is 8. Valid values are 1, 2, 4, 8, and 16. The alignment of a member will be on a boundary that is either a multiple of n or a multiple of the size of the member, <bpt id="1" ctype="x-strong">&lt;strong></bpt>whichever is smaller<ept id="1">&lt;/strong></ept>. This is equivalent to the #pragma pack option with the Microsoft Visual C++ compiler.</source>
<seg-source> <mrk mid="0" mtype="seg">To use a different alignment prefix the structure with the align keyword.</mrk> <mrk mid="1" mtype="seg">The default value for n is 8.</mrk> <mrk mid="2" mtype="seg">Valid values are 1, 2, 4, 8, and 16.</mrk> <mrk mid="3" mtype="seg">The alignment of a member will be on a boundary that is either a multiple of n or a multiple of the size of the member, <bpt id="1" ctype="x-strong">&lt;strong></bpt>whichever is smaller<ept id="1">&lt;/strong></ept>.</mrk> <mrk mid="4" mtype="seg">This is equivalent to the #pragma pack option with the Microsoft Visual C++ compiler.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">To use a different alignment prefix the structure with the align keyword.</mrk> <mrk mid="1" mtype="seg">The default value for n is 8.</mrk> <mrk mid="2" mtype="seg">Valid values are 1, 2, 4, 8, and 16.</mrk> <mrk mid="3" mtype="seg">The alignment of a member will be on a boundary that is either a multiple of n or a multiple of the size of the member, <bpt id="1" ctype="x-strong">&lt;strong></bpt>whichever is smaller<ept id="1">&lt;/strong></ept>.</mrk> <mrk mid="4" mtype="seg">This is equivalent to the #pragma pack option with the Microsoft Visual C++ compiler.</mrk></target>
</trans-unit>
<trans-unit id="75">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("short;int") ; structure is 8 bytes, the "int" is at offset 4</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("short;int") ; structure is 8 bytes, the "int" is at offset 4</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("short;int") ; structure is 8 bytes, the "int" is at offset 4</mrk></target>
</trans-unit>
<trans-unit id="76">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("align 2;short;int") ; structure is 6 bytes, the "int" is at offset 2</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("align 2;short;int") ; structure is 6 bytes, the "int" is at offset 2</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("align 2;short;int") ; structure is 6 bytes, the "int" is at offset 2</mrk></target>
</trans-unit>
<trans-unit id="77">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("byte;double") ; structure is 16 bytes, the "double" is at offset 8</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("byte;double") ; structure is 16 bytes, the "double" is at offset 8</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("byte;double") ; structure is 16 bytes, the "double" is at offset 8</mrk></target>
</trans-unit>
<trans-unit id="78">
<source xml:lang="en"> <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("align 4;byte;double") ; structure is 12 bytes, the "double" is at offset 4</source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("align 4;byte;double") ; structure is 12 bytes, the "double" is at offset 4</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate<ept id="1">&lt;/a></ept>("align 4;byte;double") ; structure is 12 bytes, the "double" is at offset 4</mrk></target>
</trans-unit>
<trans-unit id="79">
<source xml:lang="en"> If a change of alignment is needed "align" can be use before the first element which need to be changed.</source>
<seg-source> <mrk mid="0" mtype="seg">If a change of alignment is needed "align" can be use before the first element which need to be changed.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">If a change of alignment is needed "align" can be use before the first element which need to be changed.</mrk></target>
</trans-unit>
<trans-unit id="80">
<source xml:lang="en"> "align" or "align 8" leads to default alignment.</source>
<seg-source> <mrk mid="0" mtype="seg">"align" or "align 8" leads to default alignment.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">"align" or "align 8" leads to default alignment.</mrk></target>
</trans-unit>
<trans-unit id="81">
<source xml:lang="en"> To release allocated memory just set the returned variable to 0.</source>
<seg-source> <mrk mid="0" mtype="seg">To release allocated memory just set the returned variable to 0.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">To release allocated memory just set the returned variable to 0.</mrk></target>
</trans-unit>
<trans-unit id="82">
<source xml:lang="en"> <bpt id="1" ctype="x-strong">&lt;strong></bpt>The following aggregate alignment rules apply:<ept id="1">&lt;/strong></ept></source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>The following aggregate alignment rules apply:<ept id="1">&lt;/strong></ept></mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>The following aggregate alignment rules apply:<ept id="1">&lt;/strong></ept></mrk></target>
</trans-unit>
<trans-unit id="83">
<source xml:lang="en"> The alignment of an array is the same as the alignment of one of the elements of the array.</source>
<seg-source> <mrk mid="0" mtype="seg">The alignment of an array is the same as the alignment of one of the elements of the array.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The alignment of an array is the same as the alignment of one of the elements of the array.</mrk></target>
</trans-unit>
<trans-unit id="84">
<source xml:lang="en"> The alignment of the beginning of a structure is the maximum alignment of any individual member.</source>
<seg-source> <mrk mid="0" mtype="seg">The alignment of the beginning of a structure is the maximum alignment of any individual member.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The alignment of the beginning of a structure is the maximum alignment of any individual member.</mrk></target>
</trans-unit>
<trans-unit id="85">
<source xml:lang="en"> Each member within the structure is be placed at its proper alignment as defined in the previous table, which require implicit internal padding, depending on the previous member.</source>
<seg-source> <mrk mid="0" mtype="seg">Each member within the structure is be placed at its proper alignment as defined in the previous table, which require implicit internal padding, depending on the previous member.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Each member within the structure is be placed at its proper alignment as defined in the previous table, which require implicit internal padding, depending on the previous member.</mrk></target>
</trans-unit>
<trans-unit id="86">
<source xml:lang="en"> Structure size is an integral multiple of its alignment, which requires padding after the last member.</source>
<seg-source> <mrk mid="0" mtype="seg">Structure size is an integral multiple of its alignment, which requires padding after the last member.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Structure size is an integral multiple of its alignment, which requires padding after the last member.</mrk></target>
</trans-unit>
<trans-unit id="87">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="88">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="89">
<source xml:lang="en">Assign a Local constant variable the definition of a structure (read carefully the DllStructCreate remarks).</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local constant variable the definition of a structure (read carefully the DllStructCreate remarks).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local constant variable the definition of a structure (read carefully the DllStructCreate remarks).</mrk></target>
</trans-unit>
<trans-unit id="90">
<source xml:lang="en">struct;int var1;byte var2;uint var3;char var4[128];endstruct</source>
<seg-source><mrk mid="0" mtype="seg">struct;int var1;byte var2;uint var3;char var4[128];endstruct</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">struct;int var1;byte var2;uint var3;char var4[128];endstruct</mrk></target>
</trans-unit>
<trans-unit id="91">
<source xml:lang="en">Note: The tag variable is declared as Constant because its value will never change for any script execution.</source>
<seg-source><mrk mid="0" mtype="seg">Note:</mrk> <mrk mid="1" mtype="seg">The tag variable is declared as Constant because its value will never change for any script execution.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note:</mrk> <mrk mid="1" mtype="seg">The tag variable is declared as Constant because its value will never change for any script execution.</mrk></target>
</trans-unit>
<trans-unit id="92">
<source xml:lang="en">Assign a Local variable the structure.</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable the structure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable the structure.</mrk></target>
</trans-unit>
<trans-unit id="93">
<source xml:lang="en">If an error occurred display the error code and return False.</source>
<seg-source><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></target>
</trans-unit>
<trans-unit id="94">
<source xml:lang="en">Error in DllStructCreate, Code:</source>
<seg-source><mrk mid="0" mtype="seg">Error in DllStructCreate, Code:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Error in DllStructCreate, Code:</mrk></target>
</trans-unit>
<trans-unit id="95">
<source xml:lang="en">Set the data of the element var1 (int) in the $tSTRUCT1.</source>
<seg-source><mrk mid="0" mtype="seg">Set the data of the element var1 (int) in the $tSTRUCT1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Set the data of the element var1 (int) in the $tSTRUCT1.</mrk></target>
</trans-unit>
<trans-unit id="96">
<source xml:lang="en">var1</source>
<seg-source><mrk mid="0" mtype="seg">var1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">var1</mrk></target>
</trans-unit>
<trans-unit id="97">
<source xml:lang="en">Or 1 instead of "var1".</source>
<seg-source><mrk mid="0" mtype="seg">Or 1 instead of "var1".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or 1 instead of "var1".</mrk></target>
</trans-unit>
<trans-unit id="98">
<source xml:lang="en">Set the data of the element var2 (byte) in the $tSTRUCT1.</source>
<seg-source><mrk mid="0" mtype="seg">Set the data of the element var2 (byte) in the $tSTRUCT1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Set the data of the element var2 (byte) in the $tSTRUCT1.</mrk></target>
</trans-unit>
<trans-unit id="99">
<source xml:lang="en">Or "var2" instead of 2.</source>
<seg-source><mrk mid="0" mtype="seg">Or "var2" instead of 2.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or "var2" instead of 2.</mrk></target>
</trans-unit>
<trans-unit id="100">
<source xml:lang="en">Set the data of the element var3 (uint) in the $tSTRUCT1.</source>
<seg-source><mrk mid="0" mtype="seg">Set the data of the element var3 (uint) in the $tSTRUCT1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Set the data of the element var3 (uint) in the $tSTRUCT1.</mrk></target>
</trans-unit>
<trans-unit id="101">
<source xml:lang="en">var3</source>
<seg-source><mrk mid="0" mtype="seg">var3</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">var3</mrk></target>
</trans-unit>
<trans-unit id="102">
<source xml:lang="en">The -1 (signed int) will be typecasted to unsigned int.</source>
<seg-source><mrk mid="0" mtype="seg">The -1 (signed int) will be typecasted to unsigned int.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The -1 (signed int) will be typecasted to unsigned int.</mrk></target>
</trans-unit>
<trans-unit id="103">
<source xml:lang="en">Or 3 instead of "var3".</source>
<seg-source><mrk mid="0" mtype="seg">Or 3 instead of "var3".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or 3 instead of "var3".</mrk></target>
</trans-unit>
<trans-unit id="104">
<source xml:lang="en">Set the data of the element var4 (char) in the $tSTRUCT1.</source>
<seg-source><mrk mid="0" mtype="seg">Set the data of the element var4 (char) in the $tSTRUCT1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Set the data of the element var4 (char) in the $tSTRUCT1.</mrk></target>
</trans-unit>
<trans-unit id="105">
<source xml:lang="en">var4</source>
<seg-source><mrk mid="0" mtype="seg">var4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">var4</mrk></target>
</trans-unit>
<trans-unit id="106">
<source xml:lang="en">Hello</source>
<seg-source><mrk mid="0" mtype="seg">Hello</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Hello</mrk></target>
</trans-unit>
<trans-unit id="107">
<source xml:lang="en">Or 4 instead of "var4".</source>
<seg-source><mrk mid="0" mtype="seg">Or 4 instead of "var4".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or 4 instead of "var4".</mrk></target>
</trans-unit>
<trans-unit id="108">
<source xml:lang="en">Note: This element can contain up to 128 characters.</source>
<seg-source><mrk mid="0" mtype="seg">Note:</mrk> <mrk mid="1" mtype="seg">This element can contain up to 128 characters.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note:</mrk> <mrk mid="1" mtype="seg">This element can contain up to 128 characters.</mrk></target>
</trans-unit>
<trans-unit id="109">
<source xml:lang="en">Change the data of the element var4 (char) in the $tSTRUCT1, at the index 1 of the char array (1 based index).</source>
<seg-source><mrk mid="0" mtype="seg">Change the data of the element var4 (char) in the $tSTRUCT1, at the index 1 of the char array (1 based index).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Change the data of the element var4 (char) in the $tSTRUCT1, at the index 1 of the char array (1 based index).</mrk></target>
</trans-unit>
<trans-unit id="110">
<source xml:lang="en">var4</source>
<seg-source><mrk mid="0" mtype="seg">var4</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">var4</mrk></target>
</trans-unit>
<trans-unit id="111">
<source xml:lang="en">h</source>
<seg-source><mrk mid="0" mtype="seg">h</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">h</mrk></target>
</trans-unit>
<trans-unit id="112">
<source xml:lang="en">Display the results.</source>
<seg-source><mrk mid="0" mtype="seg">Display the results.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the results.</mrk></target>
</trans-unit>
<trans-unit id="113">
<source xml:lang="en">Struct Size:</source>
<seg-source><mrk mid="0" mtype="seg">Struct Size:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Struct Size:</mrk></target>
</trans-unit>
<trans-unit id="114">
<source xml:lang="en">Struct pointer:</source>
<seg-source><mrk mid="0" mtype="seg">Struct pointer:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Struct pointer:</mrk></target>
</trans-unit>
<trans-unit id="115">
<source xml:lang="en">Data:</source>
<seg-source><mrk mid="0" mtype="seg">Data:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Data:</mrk></target>
</trans-unit>
<trans-unit id="116">
<source xml:lang="en">Or "var1" instead of 1.</source>
<seg-source><mrk mid="0" mtype="seg">Or "var1" instead of 1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or "var1" instead of 1.</mrk></target>
</trans-unit>
<trans-unit id="117">
<source xml:lang="en">var2</source>
<seg-source><mrk mid="0" mtype="seg">var2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">var2</mrk></target>
</trans-unit>
<trans-unit id="118">
<source xml:lang="en">Or 2 instead of "var2".</source>
<seg-source><mrk mid="0" mtype="seg">Or 2 instead of "var2".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or 2 instead of "var2".</mrk></target>
</trans-unit>
<trans-unit id="119">
<source xml:lang="en">Or "var3" instead of 3.</source>
<seg-source><mrk mid="0" mtype="seg">Or "var3" instead of 3.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or "var3" instead of 3.</mrk></target>
</trans-unit>
<trans-unit id="120">
<source xml:lang="en">Or "var4" instead of 4.</source>
<seg-source><mrk mid="0" mtype="seg">Or "var4" instead of 4.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or "var4" instead of 4.</mrk></target>
</trans-unit>
<trans-unit id="121">
<source xml:lang="en">Release the resources used by the structure.</source>
<seg-source><mrk mid="0" mtype="seg">Release the resources used by the structure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Release the resources used by the structure.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
