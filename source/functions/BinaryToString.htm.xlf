<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="functions/BinaryToString.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Converts a binary variant into a string.</source>
<seg-source><mrk mid="0" mtype="seg">Converts a binary variant into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Converts a binary variant into a string.</mrk></target>
<note>Function BinaryToString</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">An expression to convert into a string.</source>
<seg-source><mrk mid="0" mtype="seg">An expression to convert into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">An expression to convert into a string.</mrk></target>
<note>expression</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Changes how the binary data is converted:</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Changes how the binary data is converted:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Changes how the binary data is converted:</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en">     $SB_ANSI (1) = binary data is ANSI (default)</source>
<seg-source> <mrk mid="0" mtype="seg">    $SB_ANSI (1) = binary data is ANSI (default)</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SB_ANSI (1) = binary data is ANSI (default)</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $SB_UTF16LE (2) = binary data is UTF16 Little Endian</source>
<seg-source> <mrk mid="0" mtype="seg">    $SB_UTF16LE (2) = binary data is UTF16 Little Endian</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SB_UTF16LE (2) = binary data is UTF16 Little Endian</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $SB_UTF16BE (3) = binary data is UTF16 Big Endian</source>
<seg-source> <mrk mid="0" mtype="seg">    $SB_UTF16BE (3) = binary data is UTF16 Big Endian</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SB_UTF16BE (3) = binary data is UTF16 Big Endian</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $SB_UTF8 (4) = binary data is UTF8</source>
<seg-source> <mrk mid="0" mtype="seg">    $SB_UTF8 (4) = binary data is UTF8</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $SB_UTF8 (4) = binary data is UTF8</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en"> Constants are defined in StringConstants.au3.</source>
<seg-source> <mrk mid="0" mtype="seg">Constants are defined in StringConstants.au3.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Constants are defined in StringConstants.au3.</mrk></target>
<note>flag</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">the string representation of the binary data.</source>
<seg-source><mrk mid="0" mtype="seg">the string representation of the binary data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">the string representation of the binary data.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">an empty string and sets the @error flag to non-zero.</source>
<seg-source><mrk mid="0" mtype="seg">an empty string and sets the @error flag to non-zero.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">an empty string and sets the @error flag to non-zero.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">1 = Input string had zero length.</source>
<seg-source><mrk mid="0" mtype="seg">1 = Input string had zero length.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">1 = Input string had zero length.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en"> 2 = Input string had an odd number of bytes but was supposed to be UTF16 (must contain an even number of bytes to be valid UTF16).</source>
<seg-source> <mrk mid="0" mtype="seg">2 = Input string had an odd number of bytes but was supposed to be UTF16 (must contain an even number of bytes to be valid UTF16).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 = Input string had an odd number of bytes but was supposed to be UTF16 (must contain an even number of bytes to be valid UTF16).</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Unlike <bpt id="1" ctype="x-a">&lt;a href="String.htm"></bpt>String()<ept id="1">&lt;/a></ept> which returns a hexadecimal representation of binary data, this function will assume the binary data is a string value and convert it appropriately.</source>
<seg-source><mrk mid="0" mtype="seg">Unlike <bpt id="1" ctype="x-a">&lt;a href="String.htm"></bpt>String()<ept id="1">&lt;/a></ept> which returns a hexadecimal representation of binary data, this function will assume the binary data is a string value and convert it appropriately.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Unlike <bpt id="1" ctype="x-a">&lt;a href="String.htm"></bpt>String()<ept id="1">&lt;/a></ept> which returns a hexadecimal representation of binary data, this function will assume the binary data is a string value and convert it appropriately.</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en"> See <bpt id="1" ctype="x-a">&lt;a href="../intro/unicode.htm"></bpt>"Unicode Support"<ept id="1">&lt;/a></ept> for a detailed description.</source>
<seg-source> <mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-a">&lt;a href="../intro/unicode.htm"></bpt>"Unicode Support"<ept id="1">&lt;/a></ept> for a detailed description.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-a">&lt;a href="../intro/unicode.htm"></bpt>"Unicode Support"<ept id="1">&lt;/a></ept> for a detailed description.</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Define the string that will be converted later.</source>
<seg-source><mrk mid="0" mtype="seg">Define the string that will be converted later.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Define the string that will be converted later.</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">NOTE: This string may show up as ?? in the help file and even in some editors.</source>
<seg-source><mrk mid="0" mtype="seg">NOTE:</mrk> <mrk mid="1" mtype="seg">This string may show up as ??</mrk> <mrk mid="2" mtype="seg">in the help file and even in some editors.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">NOTE:</mrk> <mrk mid="1" mtype="seg">This string may show up as ??</mrk> <mrk mid="2" mtype="seg">in the help file and even in some editors.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">This example is saved as UTF-8 with BOM. It should display correctly in editors</source>
<seg-source><mrk mid="0" mtype="seg">This example is saved as UTF-8 with BOM.</mrk> <mrk mid="1" mtype="seg">It should display correctly in editors</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This example is saved as UTF-8 with BOM.</mrk> <mrk mid="1" mtype="seg">It should display correctly in editors</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">which support changing code pages based on BOMs.</source>
<seg-source><mrk mid="0" mtype="seg">which support changing code pages based on BOMs.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">which support changing code pages based on BOMs.</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">Hello - 你好</source>
<seg-source><mrk mid="0" mtype="seg">Hello - 你好</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Hello - 你好</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">Temporary variables used to store conversion results. $dBinary will hold</source>
<seg-source><mrk mid="0" mtype="seg">Temporary variables used to store conversion results.</mrk> <mrk mid="1" mtype="seg">$dBinary will hold</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Temporary variables used to store conversion results.</mrk> <mrk mid="1" mtype="seg">$dBinary will hold</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">the original string in binary form and $sConverted will hold the result</source>
<seg-source><mrk mid="0" mtype="seg">the original string in binary form and $sConverted will hold the result</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">the original string in binary form and $sConverted will hold the result</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">afte it's been transformed back to the original format.</source>
<seg-source><mrk mid="0" mtype="seg">afte it's been transformed back to the original format.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">afte it's been transformed back to the original format.</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en">Convert the original UTF-8 string to an ANSI compatible binary string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an ANSI compatible binary string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an ANSI compatible binary string.</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en">Convert the ANSI compatible binary string back into a string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the ANSI compatible binary string back into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the ANSI compatible binary string back into a string.</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">Display the resulsts. Note that the last two characters will appear</source>
<seg-source><mrk mid="0" mtype="seg">Display the resulsts.</mrk> <mrk mid="1" mtype="seg">Note that the last two characters will appear</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the resulsts.</mrk> <mrk mid="1" mtype="seg">Note that the last two characters will appear</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">as ?? since they cannot be represented in ANSI.</source>
<seg-source><mrk mid="0" mtype="seg">as ??</mrk> <mrk mid="1" mtype="seg">since they cannot be represented in ANSI.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">as ??</mrk> <mrk mid="1" mtype="seg">since they cannot be represented in ANSI.</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">ANSI</source>
<seg-source><mrk mid="0" mtype="seg">ANSI</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ANSI</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">Convert the original UTF-8 string to an UTF16-LE binary string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an UTF16-LE binary string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an UTF16-LE binary string.</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">Convert the UTF16-LE binary string back into a string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the UTF16-LE binary string back into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the UTF16-LE binary string back into a string.</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">Display the resulsts.</source>
<seg-source><mrk mid="0" mtype="seg">Display the resulsts.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the resulsts.</mrk></target>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">UTF16-LE</source>
<seg-source><mrk mid="0" mtype="seg">UTF16-LE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UTF16-LE</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">Convert the original UTF-8 string to an UTF16-BE binary string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an UTF16-BE binary string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an UTF16-BE binary string.</mrk></target>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">Convert the UTF16-BE binary string back into a string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the UTF16-BE binary string back into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the UTF16-BE binary string back into a string.</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">Display the resulsts.</source>
<seg-source><mrk mid="0" mtype="seg">Display the resulsts.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the resulsts.</mrk></target>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">UTF16-BE</source>
<seg-source><mrk mid="0" mtype="seg">UTF16-BE</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UTF16-BE</mrk></target>
</trans-unit>
<trans-unit id="42">
<source xml:lang="en">Convert the original UTF-8 string to an UTF-8 binary string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an UTF-8 binary string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the original UTF-8 string to an UTF-8 binary string.</mrk></target>
</trans-unit>
<trans-unit id="43">
<source xml:lang="en">Convert the UTF8 binary string back into a string.</source>
<seg-source><mrk mid="0" mtype="seg">Convert the UTF8 binary string back into a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Convert the UTF8 binary string back into a string.</mrk></target>
</trans-unit>
<trans-unit id="44">
<source xml:lang="en">Display the resulsts.</source>
<seg-source><mrk mid="0" mtype="seg">Display the resulsts.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the resulsts.</mrk></target>
</trans-unit>
<trans-unit id="45">
<source xml:lang="en">UTF8</source>
<seg-source><mrk mid="0" mtype="seg">UTF8</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">UTF8</mrk></target>
</trans-unit>
<trans-unit id="46">
<source xml:lang="en">Helper function which formats the message for display. It takes the following parameters:</source>
<seg-source><mrk mid="0" mtype="seg">Helper function which formats the message for display.</mrk> <mrk mid="1" mtype="seg">It takes the following parameters:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Helper function which formats the message for display.</mrk> <mrk mid="1" mtype="seg">It takes the following parameters:</mrk></target>
</trans-unit>
<trans-unit id="47">
<source xml:lang="en">$sOriginal - The original string before conversions.</source>
<seg-source><mrk mid="0" mtype="seg">$sOriginal - The original string before conversions.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$sOriginal - The original string before conversions.</mrk></target>
</trans-unit>
<trans-unit id="48">
<source xml:lang="en">$dBinary - The original string after it has been converted to binary.</source>
<seg-source><mrk mid="0" mtype="seg">$dBinary - The original string after it has been converted to binary.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$dBinary - The original string after it has been converted to binary.</mrk></target>
</trans-unit>
<trans-unit id="49">
<source xml:lang="en">$sConverted- The string after it has been converted to binary and then back to a string.</source>
<seg-source><mrk mid="0" mtype="seg">$sConverted- The string after it has been converted to binary and then back to a string.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$sConverted- The string after it has been converted to binary and then back to a string.</mrk></target>
</trans-unit>
<trans-unit id="50">
<source xml:lang="en">$sConversionType - A human friendly name for the encoding type used for the conversion.</source>
<seg-source><mrk mid="0" mtype="seg">$sConversionType - A human friendly name for the encoding type used for the conversion.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">$sConversionType - A human friendly name for the encoding type used for the conversion.</mrk></target>
</trans-unit>
<trans-unit id="51">
<source xml:lang="en">Original:</source>
<seg-source><mrk mid="0" mtype="seg">Original:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Original:</mrk></target>
</trans-unit>
<trans-unit id="52">
<source xml:lang="en">Binary:</source>
<seg-source><mrk mid="0" mtype="seg">Binary:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Binary:</mrk></target>
</trans-unit>
<trans-unit id="53">
<source xml:lang="en">:</source>
<seg-source><mrk mid="0" mtype="seg">:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">:</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
