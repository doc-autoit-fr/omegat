<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="functions/DllStructGetPtr.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Returns the pointer to the struct or an element in the struct.</source>
<seg-source><mrk mid="0" mtype="seg">Returns the pointer to the struct or an element in the struct.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Returns the pointer to the struct or an element in the struct.</mrk></target>
<note>Function DllStructGetPtr</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en"> The struct returned by <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>. </source>
<seg-source> <mrk mid="0" mtype="seg">The struct returned by <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The struct returned by <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</mrk> </target>
<note>Struct</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"> <bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> The element of the struct whose pointer you need, starting at 1 or the element name as defined in <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>. </source>
<seg-source> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The element of the struct whose pointer you need, starting at 1 or the element name as defined in <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">The element of the struct whose pointer you need, starting at 1 or the element name as defined in <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</mrk> </target>
<note>Element</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">The pointer to the struct.</source>
<seg-source><mrk mid="0" mtype="seg">The pointer to the struct.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The pointer to the struct.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">0.</source>
<seg-source><mrk mid="0" mtype="seg">0.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">0.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">@error:</source>
<seg-source><mrk mid="0" mtype="seg">@error:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">@error:</mrk></target>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en"> 1 = Struct not a valid struct returned by <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</source>
<seg-source> <mrk mid="0" mtype="seg">1 = Struct not a valid struct returned by <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">1 = Struct not a valid struct returned by <bpt id="1" ctype="x-a">&lt;a href="DllStructCreate.htm"></bpt>DllStructCreate()<ept id="1">&lt;/a></ept>.</mrk></target>
<note>@error:</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en"> 2 = Element out of range. </source>
<seg-source> <mrk mid="0" mtype="seg">2 = Element out of range.</mrk> </seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">2 = Element out of range.</mrk> </target>
<note>@error:</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">Used in <bpt id="1" ctype="x-a">&lt;a href="DllCall.htm"></bpt>DllCall()<ept id="1">&lt;/a></ept>.</source>
<seg-source><mrk mid="0" mtype="seg">Used in <bpt id="1" ctype="x-a">&lt;a href="DllCall.htm"></bpt>DllCall()<ept id="1">&lt;/a></ept>.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Used in <bpt id="1" ctype="x-a">&lt;a href="DllCall.htm"></bpt>DllCall()<ept id="1">&lt;/a></ept>.</mrk></target>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">Example 1</source>
<seg-source><mrk mid="0" mtype="seg">Example 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 1</mrk></target>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">Assign a Local variable the handle of the current active window.</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable the handle of the current active window.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable the handle of the current active window.</mrk></target>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">Same as: "[active]".</source>
<seg-source><mrk mid="0" mtype="seg">Same as:</mrk> <mrk mid="1" mtype="seg">"[active]".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Same as:</mrk> <mrk mid="1" mtype="seg">"[active]".</mrk></target>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">Assign a Local variable the window's rectangle (array).</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable the window's rectangle (array).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable the window's rectangle (array).</mrk></target>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en">Assign a Local variable the structure created with the tagRECT definition.</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable the structure created with the tagRECT definition.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable the structure created with the tagRECT definition.</mrk></target>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en">If an error occurred display the error code and return False.</source>
<seg-source><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></target>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Error in DllStructCreate, Code:</source>
<seg-source><mrk mid="0" mtype="seg">Error in DllStructCreate, Code:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Error in DllStructCreate, Code:</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">Make the DllCall of the GetWindowRect function.</source>
<seg-source><mrk mid="0" mtype="seg">Make the DllCall of the GetWindowRect function.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Make the DllCall of the GetWindowRect function.</mrk></target>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">user32.dll</source>
<seg-source><mrk mid="0" mtype="seg">user32.dll</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">user32.dll</mrk></target>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">int</source>
<seg-source><mrk mid="0" mtype="seg">int</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">int</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">GetWindowRect</source>
<seg-source><mrk mid="0" mtype="seg">GetWindowRect</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">GetWindowRect</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en">hwnd</source>
<seg-source><mrk mid="0" mtype="seg">hwnd</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">hwnd</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en">ptr</source>
<seg-source><mrk mid="0" mtype="seg">ptr</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">ptr</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en">If an error occurred display the error code and return False.</source>
<seg-source><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en">Error in DllCall, Code:</source>
<seg-source><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en">Note: The 2nd parameter of the GetWindowRect function requires a pointer,</source>
<seg-source><mrk mid="0" mtype="seg">Note:</mrk> <mrk mid="1" mtype="seg">The 2nd parameter of the GetWindowRect function requires a pointer,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Note:</mrk> <mrk mid="1" mtype="seg">The 2nd parameter of the GetWindowRect function requires a pointer,</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en">the result returned by the DllStructCreate is NOT a pointer, but using 'struct*' allows to pass a structure as a ptr.</source>
<seg-source><mrk mid="0" mtype="seg">the result returned by the DllStructCreate is NOT a pointer, but using 'struct*' allows to pass a structure as a ptr.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">the result returned by the DllStructCreate is NOT a pointer, but using 'struct*' allows to pass a structure as a ptr.</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">Assign Local variables the returned rectangle.</source>
<seg-source><mrk mid="0" mtype="seg">Assign Local variables the returned rectangle.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign Local variables the returned rectangle.</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">Left</source>
<seg-source><mrk mid="0" mtype="seg">Left</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Left</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">Or 1 instead of "Left".</source>
<seg-source><mrk mid="0" mtype="seg">Or 1 instead of "Left".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or 1 instead of "Left".</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">Or "Top" instead of 2.</source>
<seg-source><mrk mid="0" mtype="seg">Or "Top" instead of 2.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or "Top" instead of 2.</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">Or "Right" instead of 3.</source>
<seg-source><mrk mid="0" mtype="seg">Or "Right" instead of 3.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or "Right" instead of 3.</mrk></target>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">Bottom</source>
<seg-source><mrk mid="0" mtype="seg">Bottom</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Bottom</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">Or 4 instead of "Bottom".</source>
<seg-source><mrk mid="0" mtype="seg">Or 4 instead of "Bottom".</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Or 4 instead of "Bottom".</mrk></target>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">Release the resources used by the structure.</source>
<seg-source><mrk mid="0" mtype="seg">Release the resources used by the structure.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Release the resources used by the structure.</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">Display the results of WinGetPos and the returned rectangle.</source>
<seg-source><mrk mid="0" mtype="seg">Display the results of WinGetPos and the returned rectangle.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the results of WinGetPos and the returned rectangle.</mrk></target>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">WinGetPos(): (</source>
<seg-source><mrk mid="0" mtype="seg">WinGetPos(): (</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">WinGetPos(): (</mrk></target>
</trans-unit>
<trans-unit id="42">
<source xml:lang="en">,</source>
<seg-source><mrk mid="0" mtype="seg">,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">,</mrk></target>
</trans-unit>
<trans-unit id="43">
<source xml:lang="en">)</source>
<seg-source><mrk mid="0" mtype="seg">)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">)</mrk></target>
</trans-unit>
<trans-unit id="44">
<source xml:lang="en">(</source>
<seg-source><mrk mid="0" mtype="seg">(</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">(</mrk></target>
</trans-unit>
<trans-unit id="45">
<source xml:lang="en">,</source>
<seg-source><mrk mid="0" mtype="seg">,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">,</mrk></target>
</trans-unit>
<trans-unit id="46">
<source xml:lang="en">)</source>
<seg-source><mrk mid="0" mtype="seg">)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">)</mrk></target>
</trans-unit>
<trans-unit id="47">
<source xml:lang="en">GetWindowRect(): (</source>
<seg-source><mrk mid="0" mtype="seg">GetWindowRect(): (</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">GetWindowRect(): (</mrk></target>
</trans-unit>
<trans-unit id="48">
<source xml:lang="en">,</source>
<seg-source><mrk mid="0" mtype="seg">,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">,</mrk></target>
</trans-unit>
<trans-unit id="49">
<source xml:lang="en">) (</source>
<seg-source><mrk mid="0" mtype="seg">) (</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">) (</mrk></target>
</trans-unit>
<trans-unit id="50">
<source xml:lang="en">,</source>
<seg-source><mrk mid="0" mtype="seg">,</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">,</mrk></target>
</trans-unit>
<trans-unit id="51">
<source xml:lang="en">)</source>
<seg-source><mrk mid="0" mtype="seg">)</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">)</mrk></target>
</trans-unit>
<trans-unit id="52">
<source xml:lang="en">Example 2</source>
<seg-source><mrk mid="0" mtype="seg">Example 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 2</mrk></target>
</trans-unit>
<trans-unit id="53">
<source xml:lang="en">Assign a Local variable a structure with the definition of an int.</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable a structure with the definition of an int.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable a structure with the definition of an int.</mrk></target>
</trans-unit>
<trans-unit id="54">
<source xml:lang="en">int</source>
<seg-source><mrk mid="0" mtype="seg">int</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">int</mrk></target>
</trans-unit>
<trans-unit id="55">
<source xml:lang="en">If an error occurred display the error code and return False.</source>
<seg-source><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></target>
</trans-unit>
<trans-unit id="56">
<source xml:lang="en">Error in DllCall, Code:</source>
<seg-source><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></target>
</trans-unit>
<trans-unit id="57">
<source xml:lang="en">Assign a Local variable the tSTRUCT1 structure except that the elements will be got according to the new definition.</source>
<seg-source><mrk mid="0" mtype="seg">Assign a Local variable the tSTRUCT1 structure except that the elements will be got according to the new definition.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Assign a Local variable the tSTRUCT1 structure except that the elements will be got according to the new definition.</mrk></target>
</trans-unit>
<trans-unit id="58">
<source xml:lang="en">uint</source>
<seg-source><mrk mid="0" mtype="seg">uint</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">uint</mrk></target>
</trans-unit>
<trans-unit id="59">
<source xml:lang="en">If an error occurred display the error code and return False.</source>
<seg-source><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></target>
</trans-unit>
<trans-unit id="60">
<source xml:lang="en">Error in DllCall, Code:</source>
<seg-source><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></target>
</trans-unit>
<trans-unit id="61">
<source xml:lang="en">float</source>
<seg-source><mrk mid="0" mtype="seg">float</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">float</mrk></target>
</trans-unit>
<trans-unit id="62">
<source xml:lang="en">If an error occurred display the error code and return False.</source>
<seg-source><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">If an error occurred display the error code and return False.</mrk></target>
</trans-unit>
<trans-unit id="63">
<source xml:lang="en">Error in DllCall, Code:</source>
<seg-source><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Error in DllCall, Code:</mrk></target>
</trans-unit>
<trans-unit id="64">
<source xml:lang="en">Notes: -The structures points to the same structure (they have the same pointer);</source>
<seg-source><mrk mid="0" mtype="seg">Notes:</mrk> <mrk mid="1" mtype="seg">-The structures points to the same structure (they have the same pointer);</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Notes:</mrk> <mrk mid="1" mtype="seg">-The structures points to the same structure (they have the same pointer);</mrk></target>
</trans-unit>
<trans-unit id="65">
<source xml:lang="en">The first element got with the:</source>
<seg-source><mrk mid="0" mtype="seg">The first element got with the:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The first element got with the:</mrk></target>
</trans-unit>
<trans-unit id="66">
<source xml:lang="en">*tSTRUCT1 struct will be an int.</source>
<seg-source><mrk mid="0" mtype="seg">*tSTRUCT1 struct will be an int.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">*tSTRUCT1 struct will be an int.</mrk></target>
</trans-unit>
<trans-unit id="67">
<source xml:lang="en">*tSTRUCT2 struct will be an unsigned int (the element is casted from int to uint).</source>
<seg-source><mrk mid="0" mtype="seg">*tSTRUCT2 struct will be an unsigned int (the element is casted from int to uint).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">*tSTRUCT2 struct will be an unsigned int (the element is casted from int to uint).</mrk></target>
</trans-unit>
<trans-unit id="68">
<source xml:lang="en">*tSTRUCT3 struct will be a float (the element is casted from int to float).</source>
<seg-source><mrk mid="0" mtype="seg">*tSTRUCT3 struct will be a float (the element is casted from int to float).</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">*tSTRUCT3 struct will be a float (the element is casted from int to float).</mrk></target>
</trans-unit>
<trans-unit id="69">
<source xml:lang="en">-The "reinterpret_cast" casting operator is used.</source>
<seg-source><mrk mid="0" mtype="seg">-The "reinterpret_cast" casting operator is used.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">-The "reinterpret_cast" casting operator is used.</mrk></target>
</trans-unit>
<trans-unit id="70">
<source xml:lang="en">Set the data of the first element (int) in the $tSTRUCT1.</source>
<seg-source><mrk mid="0" mtype="seg">Set the data of the first element (int) in the $tSTRUCT1.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Set the data of the first element (int) in the $tSTRUCT1.</mrk></target>
</trans-unit>
<trans-unit id="71">
<source xml:lang="en">Display the different data types of the same data.</source>
<seg-source><mrk mid="0" mtype="seg">Display the different data types of the same data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the different data types of the same data.</mrk></target>
</trans-unit>
<trans-unit id="72">
<source xml:lang="en">int:</source>
<seg-source><mrk mid="0" mtype="seg">int:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">int:</mrk></target>
</trans-unit>
<trans-unit id="73">
<source xml:lang="en">uint:</source>
<seg-source><mrk mid="0" mtype="seg">uint:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">uint:</mrk></target>
</trans-unit>
<trans-unit id="74">
<source xml:lang="en">float:</source>
<seg-source><mrk mid="0" mtype="seg">float:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">float:</mrk></target>
</trans-unit>
<trans-unit id="75">
<source xml:lang="en">Release the resources used by the structures.</source>
<seg-source><mrk mid="0" mtype="seg">Release the resources used by the structures.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Release the resources used by the structures.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
