<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions">
<file original="functions/FileOpen.htm" source-language="en" target-language="fr" datatype="html">
<body>
<trans-unit id="1">
<source xml:lang="en">Opens a file for reading or writing.</source>
<seg-source><mrk mid="0" mtype="seg">Opens a file for reading or writing.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Opens a file for reading or writing.</mrk></target>
<note>Function FileOpen</note>
</trans-unit>
<trans-unit id="2">
<source xml:lang="en">Parameters</source>
<seg-source><mrk mid="0" mtype="seg">Parameters</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Parameters</mrk></target>
</trans-unit>
<trans-unit id="3">
<source xml:lang="en">Filename of the file to open.</source>
<seg-source><mrk mid="0" mtype="seg">Filename of the file to open.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Filename of the file to open.</mrk></target>
<note>filename</note>
</trans-unit>
<trans-unit id="4">
<source xml:lang="en"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept> Mode to open the file in.</source>
<seg-source><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Mode to open the file in.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg"><bpt id="1" ctype="x-strong">&lt;strong></bpt>[optional]<ept id="1">&lt;/strong></ept></mrk> <mrk mid="1" mtype="seg">Mode to open the file in.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="5">
<source xml:lang="en"> Can be a combination of the following:</source>
<seg-source> <mrk mid="0" mtype="seg">Can be a combination of the following:</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Can be a combination of the following:</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="6">
<source xml:lang="en">     $FO_READ (0) = Read mode (default)</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_READ (0) = Read mode (default)</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_READ (0) = Read mode (default)</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="7">
<source xml:lang="en">     $FO_APPEND (1) = Write mode (append to end of file)</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_APPEND (1) = Write mode (append to end of file)</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_APPEND (1) = Write mode (append to end of file)</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="8">
<source xml:lang="en">     $FO_OVERWRITE (2) = Write mode (erase previous contents)</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_OVERWRITE (2) = Write mode (erase previous contents)</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_OVERWRITE (2) = Write mode (erase previous contents)</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="9">
<source xml:lang="en">     $FO_CREATEPATH (8) = Create directory structure if it doesn't exist (See Remarks).</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_CREATEPATH (8) = Create directory structure if it doesn't exist (See Remarks).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_CREATEPATH (8) = Create directory structure if it doesn't exist (See Remarks).</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="10">
<source xml:lang="en">     $FO_BINARY (16) = Force binary mode (See Remarks).</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_BINARY (16) = Force binary mode (See Remarks).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_BINARY (16) = Force binary mode (See Remarks).</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="11">
<source xml:lang="en">     $FO_UNICODE or $FO_UTF16_LE (32) = Use Unicode UTF16 Little Endian reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_UNICODE or $FO_UTF16_LE (32) = Use Unicode UTF16 Little Endian reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_UNICODE or $FO_UTF16_LE (32) = Use Unicode UTF16 Little Endian reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="12">
<source xml:lang="en">     $FO_UTF16_BE (64) = Use Unicode UTF16 Big Endian reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_UTF16_BE (64) = Use Unicode UTF16 Big Endian reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_UTF16_BE (64) = Use Unicode UTF16 Big Endian reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="13">
<source xml:lang="en">     $FO_UTF8 (128) = Use Unicode UTF8 (with BOM) reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_UTF8 (128) = Use Unicode UTF8 (with BOM) reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_UTF8 (128) = Use Unicode UTF8 (with BOM) reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="14">
<source xml:lang="en">     $FO_UTF8_NOBOM (256) = Use Unicode UTF8 (without BOM) reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_UTF8_NOBOM (256) = Use Unicode UTF8 (without BOM) reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_UTF8_NOBOM (256) = Use Unicode UTF8 (without BOM) reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="15">
<source xml:lang="en">     $FO_ANSI (512) = Use ANSI reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_ANSI (512) = Use ANSI reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_ANSI (512) = Use ANSI reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="16">
<source xml:lang="en">     $FO_UTF16_LE_NOBOM (1024) = Use Unicode UTF16 Little Endian (without BOM) reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_UTF16_LE_NOBOM (1024) = Use Unicode UTF16 Little Endian (without BOM) reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_UTF16_LE_NOBOM (1024) = Use Unicode UTF16 Little Endian (without BOM) reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="17">
<source xml:lang="en">     $FO_UTF16_BE_NOBOM (2048) = Use Unicode UTF16 Big Endian (without BOM) reading and writing mode.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_UTF16_BE_NOBOM (2048) = Use Unicode UTF16 Big Endian (without BOM) reading and writing mode.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_UTF16_BE_NOBOM (2048) = Use Unicode UTF16 Big Endian (without BOM) reading and writing mode.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="18">
<source xml:lang="en">     $FO_FULLFILE_DETECT (16384) = When opening for reading and no BOM is present, use the entire file to determine if it is UTF8 or UTF16. If this is not used then only the initial part of the file (up to 64KB) is checked for performance reasons.</source>
<seg-source> <mrk mid="0" mtype="seg">    $FO_FULLFILE_DETECT (16384) = When opening for reading and no BOM is present, use the entire file to determine if it is UTF8 or UTF16.</mrk> <mrk mid="1" mtype="seg">If this is not used then only the initial part of the file (up to 64KB) is checked for performance reasons.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">    $FO_FULLFILE_DETECT (16384) = When opening for reading and no BOM is present, use the entire file to determine if it is UTF8 or UTF16.</mrk> <mrk mid="1" mtype="seg">If this is not used then only the initial part of the file (up to 64KB) is checked for performance reasons.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="19">
<source xml:lang="en"> The folder path must already exist (except using $FO_CREATEPATH mode - See Remarks).</source>
<seg-source> <mrk mid="0" mtype="seg">The folder path must already exist (except using $FO_CREATEPATH mode - See Remarks).</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The folder path must already exist (except using $FO_CREATEPATH mode - See Remarks).</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="20">
<source xml:lang="en"> Constants are defined in FileConstants.au3.</source>
<seg-source> <mrk mid="0" mtype="seg">Constants are defined in FileConstants.au3.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Constants are defined in FileConstants.au3.</mrk></target>
<note>mode</note>
</trans-unit>
<trans-unit id="21">
<source xml:lang="en">Return Value</source>
<seg-source><mrk mid="0" mtype="seg">Return Value</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Return Value</mrk></target>
</trans-unit>
<trans-unit id="22">
<source xml:lang="en">a file "handle" for use with subsequent file functions.</source>
<seg-source><mrk mid="0" mtype="seg">a file "handle" for use with subsequent file functions.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">a file "handle" for use with subsequent file functions.</mrk></target>
<note>Success:</note>
</trans-unit>
<trans-unit id="23">
<source xml:lang="en">-1 if error occurs.</source>
<seg-source><mrk mid="0" mtype="seg">-1 if error occurs.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">-1 if error occurs.</mrk></target>
<note>Failure:</note>
</trans-unit>
<trans-unit id="24">
<source xml:lang="en">Remarks</source>
<seg-source><mrk mid="0" mtype="seg">Remarks</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Remarks</mrk></target>
</trans-unit>
<trans-unit id="25">
<source xml:lang="en">The file handle must be closed with the <bpt id="1" ctype="x-a">&lt;a href="FileClose.htm"></bpt>FileClose()<ept id="1">&lt;/a></ept> function.</source>
<seg-source><mrk mid="0" mtype="seg">The file handle must be closed with the <bpt id="1" ctype="x-a">&lt;a href="FileClose.htm"></bpt>FileClose()<ept id="1">&lt;/a></ept> function.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">The file handle must be closed with the <bpt id="1" ctype="x-a">&lt;a href="FileClose.htm"></bpt>FileClose()<ept id="1">&lt;/a></ept> function.</mrk></target>
</trans-unit>
<trans-unit id="26">
<source xml:lang="en"> A file may fail to open due to access rights or attributes.</source>
<seg-source> <mrk mid="0" mtype="seg">A file may fail to open due to access rights or attributes.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">A file may fail to open due to access rights or attributes.</mrk></target>
</trans-unit>
<trans-unit id="27">
<source xml:lang="en"> The default mode when writing text is UTF8 (without BOM) - use the unicode mode flags to change this. When reading without an explicit unicode mode flag, the content of the file is examined and a guess is made whether the file is UTF8, UTF16 or ANSI. If opening an existing file and that file has a BOM then the BOM will be honored regardless of the unicode mode flags passed.</source>
<seg-source> <mrk mid="0" mtype="seg">The default mode when writing text is UTF8 (without BOM) - use the unicode mode flags to change this.</mrk> <mrk mid="1" mtype="seg">When reading without an explicit unicode mode flag, the content of the file is examined and a guess is made whether the file is UTF8, UTF16 or ANSI.</mrk> <mrk mid="2" mtype="seg">If opening an existing file and that file has a BOM then the BOM will be honored regardless of the unicode mode flags passed.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">The default mode when writing text is UTF8 (without BOM) - use the unicode mode flags to change this.</mrk> <mrk mid="1" mtype="seg">When reading without an explicit unicode mode flag, the content of the file is examined and a guess is made whether the file is UTF8, UTF16 or ANSI.</mrk> <mrk mid="2" mtype="seg">If opening an existing file and that file has a BOM then the BOM will be honored regardless of the unicode mode flags passed.</mrk></target>
</trans-unit>
<trans-unit id="28">
<source xml:lang="en"> Opening a file in write mode creates the file if it does not exist. Directories are not created unless the correct flag is used.</source>
<seg-source> <mrk mid="0" mtype="seg">Opening a file in write mode creates the file if it does not exist.</mrk> <mrk mid="1" mtype="seg">Directories are not created unless the correct flag is used.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">Opening a file in write mode creates the file if it does not exist.</mrk> <mrk mid="1" mtype="seg">Directories are not created unless the correct flag is used.</mrk></target>
</trans-unit>
<trans-unit id="29">
<source xml:lang="en"> When reading and writing via the same file handle, the <bpt id="1" ctype="x-a">&lt;a href="FileSetPos.htm"></bpt>FileSetPos()<ept id="1">&lt;/a></ept> function must be used to update the current file position.</source>
<seg-source> <mrk mid="0" mtype="seg">When reading and writing via the same file handle, the <bpt id="1" ctype="x-a">&lt;a href="FileSetPos.htm"></bpt>FileSetPos()<ept id="1">&lt;/a></ept> function must be used to update the current file position.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">When reading and writing via the same file handle, the <bpt id="1" ctype="x-a">&lt;a href="FileSetPos.htm"></bpt>FileSetPos()<ept id="1">&lt;/a></ept> function must be used to update the current file position.</mrk></target>
</trans-unit>
<trans-unit id="30">
<source xml:lang="en"> A file can be read as binary (byte) data by using <bpt id="1" ctype="x-a">&lt;a href="FileOpen.htm"></bpt>FileOpen()<ept id="1">&lt;/a></ept> with the binary flag.</source>
<seg-source> <mrk mid="0" mtype="seg">A file can be read as binary (byte) data by using <bpt id="1" ctype="x-a">&lt;a href="FileOpen.htm"></bpt>FileOpen()<ept id="1">&lt;/a></ept> with the binary flag.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">A file can be read as binary (byte) data by using <bpt id="1" ctype="x-a">&lt;a href="FileOpen.htm"></bpt>FileOpen()<ept id="1">&lt;/a></ept> with the binary flag.</mrk></target>
</trans-unit>
<trans-unit id="31">
<source xml:lang="en"> See <bpt id="1" ctype="x-a">&lt;a href="../intro/unicode.htm"></bpt>"Unicode Support"<ept id="1">&lt;/a></ept> for a detailed description.</source>
<seg-source> <mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-a">&lt;a href="../intro/unicode.htm"></bpt>"Unicode Support"<ept id="1">&lt;/a></ept> for a detailed description.</mrk></seg-source>
<target xml:lang="fr"> <mrk mid="0" mtype="seg">See <bpt id="1" ctype="x-a">&lt;a href="../intro/unicode.htm"></bpt>"Unicode Support"<ept id="1">&lt;/a></ept> for a detailed description.</mrk></target>
</trans-unit>
<trans-unit id="32">
<source xml:lang="en">Related</source>
<seg-source><mrk mid="0" mtype="seg">Related</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Related</mrk></target>
</trans-unit>
<trans-unit id="33">
<source xml:lang="en">Example</source>
<seg-source><mrk mid="0" mtype="seg">Example</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example</mrk></target>
</trans-unit>
<trans-unit id="34">
<source xml:lang="en">Example 1</source>
<seg-source><mrk mid="0" mtype="seg">Example 1</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 1</mrk></target>
</trans-unit>
<trans-unit id="35">
<source xml:lang="en">Create a constant variable in Local scope of the filepath that will be read/written to.</source>
<seg-source><mrk mid="0" mtype="seg">Create a constant variable in Local scope of the filepath that will be read/written to.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Create a constant variable in Local scope of the filepath that will be read/written to.</mrk></target>
</trans-unit>
<trans-unit id="36">
<source xml:lang="en">Create a temporary file to read data from.</source>
<seg-source><mrk mid="0" mtype="seg">Create a temporary file to read data from.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Create a temporary file to read data from.</mrk></target>
</trans-unit>
<trans-unit id="37">
<source xml:lang="en">This is an example of using FileOpen.</source>
<seg-source><mrk mid="0" mtype="seg">This is an example of using FileOpen.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is an example of using FileOpen.</mrk></target>
</trans-unit>
<trans-unit id="38">
<source xml:lang="en">An error occurred whilst writing the temporary file.</source>
<seg-source><mrk mid="0" mtype="seg">An error occurred whilst writing the temporary file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">An error occurred whilst writing the temporary file.</mrk></target>
</trans-unit>
<trans-unit id="39">
<source xml:lang="en">Open the file for reading and store the handle to a variable.</source>
<seg-source><mrk mid="0" mtype="seg">Open the file for reading and store the handle to a variable.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Open the file for reading and store the handle to a variable.</mrk></target>
</trans-unit>
<trans-unit id="40">
<source xml:lang="en">An error occurred when reading the file.</source>
<seg-source><mrk mid="0" mtype="seg">An error occurred when reading the file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">An error occurred when reading the file.</mrk></target>
</trans-unit>
<trans-unit id="41">
<source xml:lang="en">Read the contents of the file using the handle returned by FileOpen.</source>
<seg-source><mrk mid="0" mtype="seg">Read the contents of the file using the handle returned by FileOpen.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Read the contents of the file using the handle returned by FileOpen.</mrk></target>
</trans-unit>
<trans-unit id="42">
<source xml:lang="en">Close the handle returned by FileOpen.</source>
<seg-source><mrk mid="0" mtype="seg">Close the handle returned by FileOpen.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Close the handle returned by FileOpen.</mrk></target>
</trans-unit>
<trans-unit id="43">
<source xml:lang="en">Display the contents of the file.</source>
<seg-source><mrk mid="0" mtype="seg">Display the contents of the file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the contents of the file.</mrk></target>
</trans-unit>
<trans-unit id="44">
<source xml:lang="en">Contents of the file:</source>
<seg-source><mrk mid="0" mtype="seg">Contents of the file:</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Contents of the file:</mrk></target>
</trans-unit>
<trans-unit id="45">
<source xml:lang="en">Delete the temporary file.</source>
<seg-source><mrk mid="0" mtype="seg">Delete the temporary file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Delete the temporary file.</mrk></target>
</trans-unit>
<trans-unit id="46">
<source xml:lang="en">Example 2</source>
<seg-source><mrk mid="0" mtype="seg">Example 2</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Example 2</mrk></target>
</trans-unit>
<trans-unit id="47">
<source xml:lang="en">Create a constant variable in Local scope of the filepath that will be read/written to.</source>
<seg-source><mrk mid="0" mtype="seg">Create a constant variable in Local scope of the filepath that will be read/written to.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Create a constant variable in Local scope of the filepath that will be read/written to.</mrk></target>
</trans-unit>
<trans-unit id="48">
<source xml:lang="en">Open the file for read/write access.</source>
<seg-source><mrk mid="0" mtype="seg">Open the file for read/write access.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Open the file for read/write access.</mrk></target>
</trans-unit>
<trans-unit id="49">
<source xml:lang="en">An error occurred when reading/writing the file.</source>
<seg-source><mrk mid="0" mtype="seg">An error occurred when reading/writing the file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">An error occurred when reading/writing the file.</mrk></target>
</trans-unit>
<trans-unit id="50">
<source xml:lang="en">Write some data.</source>
<seg-source><mrk mid="0" mtype="seg">Write some data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Write some data.</mrk></target>
</trans-unit>
<trans-unit id="51">
<source xml:lang="en">This is some data to show that the handle was open with read/write access.</source>
<seg-source><mrk mid="0" mtype="seg">This is some data to show that the handle was open with read/write access.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is some data to show that the handle was open with read/write access.</mrk></target>
</trans-unit>
<trans-unit id="52">
<source xml:lang="en">Retrieve the current position in the file.</source>
<seg-source><mrk mid="0" mtype="seg">Retrieve the current position in the file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Retrieve the current position in the file.</mrk></target>
</trans-unit>
<trans-unit id="53">
<source xml:lang="en">Now, adjust the position to the beginning.</source>
<seg-source><mrk mid="0" mtype="seg">Now, adjust the position to the beginning.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Now, adjust the position to the beginning.</mrk></target>
</trans-unit>
<trans-unit id="54">
<source xml:lang="en">Display the contents of the file.</source>
<seg-source><mrk mid="0" mtype="seg">Display the contents of the file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the contents of the file.</mrk></target>
</trans-unit>
<trans-unit id="55">
<source xml:lang="en">Now, adjust the position back to the previous position.</source>
<seg-source><mrk mid="0" mtype="seg">Now, adjust the position back to the previous position.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Now, adjust the position back to the previous position.</mrk></target>
</trans-unit>
<trans-unit id="56">
<source xml:lang="en">Write some addition data.</source>
<seg-source><mrk mid="0" mtype="seg">Write some addition data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Write some addition data.</mrk></target>
</trans-unit>
<trans-unit id="57">
<source xml:lang="en">This is some additional data.</source>
<seg-source><mrk mid="0" mtype="seg">This is some additional data.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">This is some additional data.</mrk></target>
</trans-unit>
<trans-unit id="58">
<source xml:lang="en">Adjust the position back to the previous position.</source>
<seg-source><mrk mid="0" mtype="seg">Adjust the position back to the previous position.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Adjust the position back to the previous position.</mrk></target>
</trans-unit>
<trans-unit id="59">
<source xml:lang="en">Display the contents of the file.</source>
<seg-source><mrk mid="0" mtype="seg">Display the contents of the file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Display the contents of the file.</mrk></target>
</trans-unit>
<trans-unit id="60">
<source xml:lang="en">Close the handle returned by FileOpen.</source>
<seg-source><mrk mid="0" mtype="seg">Close the handle returned by FileOpen.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Close the handle returned by FileOpen.</mrk></target>
</trans-unit>
<trans-unit id="61">
<source xml:lang="en">Delete the temporary file.</source>
<seg-source><mrk mid="0" mtype="seg">Delete the temporary file.</mrk></seg-source>
<target xml:lang="fr"><mrk mid="0" mtype="seg">Delete the temporary file.</mrk></target>
</trans-unit>
</body>
</file>
</xliff>
