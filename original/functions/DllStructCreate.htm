<!DOCTYPE html>
<html>
<head>
  <title>Function DllStructCreate</title>
  <meta charset="utf-8">
  <link href="../css/default.css" rel="stylesheet">
</head>
<body>
  <h1 class="small">Function Reference</h1>
  <hr style="height:0px">
  <h1>DllStructCreate</h1>
  <p class="funcdesc">Creates a C/C++ style structure to be used in DllCall.<br></p>
  <p class="codeheader">DllStructCreate ( Struct [, Pointer] )<br></p>
  <h2>Parameters</h2>
  <table>
    <tr>
      <td style="width:15%">Struct</td>
      <td style="width:85%">A string representing the structure to create (See Remarks).</td>
    </tr>
    <tr>
      <td>Pointer</td>
      <td><strong>[optional]</strong> If supplied the struct will not allocate memory but use the pointer supplied.</td>
    </tr>
  </table>
  <h2>Return Value</h2>
  <table class="noborder">
    <tr>
      <td class="valign-top" style="width:10%">Success:</td>
      <td style="width:90%">a variable for use with DllStruct calls.</td>
    </tr>
    <tr>
      <td class="valign-top">Failure:</td>
      <td>sets the @error flag to non-zero.</td>
    </tr>
    <tr>
      <td class="valign-top">@error:</td>
      <td>1 = Variable passed to DllStructCreate was not a string.<br>
      2 = There is an unknown Data Type in the string passed.<br>
      3 = Failed to allocate the memory needed for the struct, or Pointer = 0.<br>
      4 = Error allocating memory for the passed string.</td>
    </tr>
  </table><br>
  <table>
    <tr>
      <td style="width:15%"><strong>Type</strong></td>
      <td style="width:85%"><strong>Details</strong></td>
    </tr>
    <tr>
      <td>BYTE</td>
      <td>8bit(1byte) unsigned char</td>
    </tr>
    <tr>
      <td>BOOLEAN</td>
      <td>8bit(1byte) unsigned char</td>
    </tr>
    <tr>
      <td>CHAR</td>
      <td>8bit(1byte) ASCII char</td>
    </tr>
    <tr>
      <td>WCHAR</td>
      <td>16bit(2byte) UNICODE wide char</td>
    </tr>
    <tr>
      <td>SHORT</td>
      <td>16bit(2bytes) signed integer</td>
    </tr>
    <tr>
      <td>USHORT</td>
      <td>16bit(2bytes) unsigned integer</td>
    </tr>
    <tr>
      <td>WORD</td>
      <td>16bit(2bytes) unsigned integer</td>
    </tr>
    <tr>
      <td>INT</td>
      <td>32bit(4bytes) signed integer</td>
    </tr>
    <tr>
      <td>LONG</td>
      <td>32bit(4bytes) signed integer</td>
    </tr>
    <tr>
      <td>BOOL</td>
      <td>32bit(4bytes) signed integer</td>
    </tr>
    <tr>
      <td>UINT</td>
      <td>32bit(4bytes) unsigned integer</td>
    </tr>
    <tr>
      <td>ULONG</td>
      <td>32bit(4bytes) unsigned integer</td>
    </tr>
    <tr>
      <td>DWORD</td>
      <td>32bit(4bytes) unsigned integer</td>
    </tr>
    <tr>
      <td>INT64</td>
      <td>64bit(8bytes) signed integer</td>
    </tr>
    <tr>
      <td>UINT64</td>
      <td>64bit(8bytes) unsigned integer</td>
    </tr>
    <tr>
      <td>PTR</td>
      <td>32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</td>
    </tr>
    <tr>
      <td>HWND</td>
      <td>32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</td>
    </tr>
    <tr>
      <td>HANDLE</td>
      <td>32 or 64bit pointer (depending on if the x86 or x64 version of AutoIt is used)</td>
    </tr>
    <tr>
      <td>FLOAT</td>
      <td>32bit(4bytes) floating point</td>
    </tr>
    <tr>
      <td>DOUBLE</td>
      <td>64bit(8bytes) floating point</td>
    </tr>
    <tr>
      <td>INT_PTR, LONG_PTR, LRESULT, LPARAM</td>
      <td>32 or 64bit signed integer (depending on if the x86 or x64 version of AutoIt is used)</td>
    </tr>
    <tr>
      <td>UINT_PTR, ULONG_PTR, DWORD_PTR, WPARAM</td>
      <td>32 or 64bit unsigned integer (depending on if the x86 or x64 version of AutoIt is used)</td>
    </tr>
    <tr>
      <td>STRUCT</td>
      <td>The following datatypes will be align according to C declaration rules. See below.</td>
    </tr>
    <tr>
      <td>ENDSTRUCT</td>
      <td>End of the collection datatypes. Padding can occurs see below.</td>
    </tr>
    <tr>
      <td>ALIGN</td>
      <td>n bytes boundary where datatype must be aligned.</td>
    </tr>
  </table>
  <h2>Remarks</h2>
  <p>Each data type must be separated by a semi-colon ';'.<br>
  <br>
  Create arrays by adding '[size]' after the data type: <a href="DllStructCreate.htm">DllStructCreate</a>("int;char[128]")<br>
  <br>
  An elementname can be added similar to a C-style declaration: <a href="DllStructCreate.htm">DllStructCreate</a>("int n;char buffer[128]").<br>
  This dataname can be used in place of the element in other DllStruct... functions. The dataname must be alphanumeric or an underscore.<br>
  <br>
  If a collection of datatypes is defined as in a "struct{}" in C declaration, the "STRUCT; ...; ENDSTRUCT;" must be used.<br>
  This needs to be done to respect alignment inside the entire structure creation. No need if all datatypes are in the defined structure as an implicit structure alignment is done.<br>
  <br>
  <a href="DllStructCreate.htm">DllStructCreate</a>("int;STRUCT;ptr;int;ENDSTRUCT;int")&nbsp;&nbsp;&nbsp; ; structure is 32 bytes under a Windows 64-bit and 16 under Windows 32-bit<br>
  <a href="DllStructCreate.htm">DllStructCreate</a>("int;ptr;int;int")&nbsp;&nbsp;&nbsp; ; structure is 24 bytes under a Windows 64-bit and 16 under Windows 32-bit<br>
  <br>
  To use a different alignment prefix the structure with the align keyword. The default value for n is 8. Valid values are 1, 2, 4, 8, and 16. The alignment of a member will be on a boundary that is either a multiple of n or a multiple of the size of the member, <strong>whichever is smaller</strong>. This is equivalent to the #pragma pack option with the Microsoft Visual C++ compiler.<br>
  <br>
  <a href="DllStructCreate.htm">DllStructCreate</a>("short;int") ; structure is 8 bytes, the "int" is at offset 4<br>
  <a href="DllStructCreate.htm">DllStructCreate</a>("align 2;short;int") ; structure is 6 bytes, the "int" is at offset 2<br>
  <br>
  <a href="DllStructCreate.htm">DllStructCreate</a>("byte;double") ; structure is 16 bytes, the "double" is at offset 8<br>
  <a href="DllStructCreate.htm">DllStructCreate</a>("align 4;byte;double") ; structure is 12 bytes, the "double" is at offset 4<br>
  <br>
  If a change of alignment is needed "align" can be use before the first element which need to be changed.<br>
  "align" or "align 8" leads to default alignment.<br>
  <br>
  To release allocated memory just set the returned variable to 0.<br>
  <br>
  <strong>The following aggregate alignment rules apply:</strong><br>
  The alignment of an array is the same as the alignment of one of the elements of the array.<br>
  <br>
  The alignment of the beginning of a structure is the maximum alignment of any individual member.<br>
  Each member within the structure is be placed at its proper alignment as defined in the previous table, which require implicit internal padding, depending on the previous member.<br>
  <br>
  Structure size is an integral multiple of its alignment, which requires padding after the last member.<br></p>
  <h2>Related</h2>
  <p translate="no"><a href="DllCall.htm">DllCall</a>, <a href="DllStructGetData.htm">DllStructGetData</a>, <a href="DllStructGetPtr.htm">DllStructGetPtr</a>, <a href="DllStructGetSize.htm">DllStructGetSize</a>, <a href="DllStructSetData.htm">DllStructSetData</a>, <a href="IsDllStruct.htm">IsDllStruct</a></p>
  <h2 class="bottom">Example</h2>
  <script type="text/javascript">
  if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
  function copyToClipboard(section) {
  if (window.clipboardData && clipboardData.setData) {
  clipboardData.setData("text", section + "\r\n");
  alert("Copied to clipboard");
  }
  }
  </script>
  <div class="codeSnippetContainer">
    <div class="codeSnippetContainerTabs">
      <script type="text/javascript">
      if (document.URL.match(/^mk:@MSITStore:/i)) {
      document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
      document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\DllStructCreate.au3,"><\/object>');
      document.write('<\/div>');
      }
      </script>
    </div>
    <div class="codeSnippetContainerCodeContainer">
      <div class="codeSnippetToolBar">
        <div class="codeSnippetToolBarText">
          <script type="text/javascript">
          if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
          document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext1\').innerText)">Copy to clipboard<\/a>');
          </script>
        </div>
      </div>
      <div class="codeSnippetContainerCode" dir="ltr" id="copytext1">
        <pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7" translate="no">&lt;MsgBoxConstants.au3&gt;</span>

<span class="S0">Example</span><span class="S8">()</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Example</span><span class="S8">()</span>
<span class="S0">    </span><span class="S2">#cs Comments:</span>
<span class="S2">    Create the following structure (C language):</span>
<span class="S2">    struct {</span>
<span class="S2">        int var1;</span>
<span class="S2">        unsigned char var2;</span>
<span class="S2">        unsigned int var3;</span>
<span class="S2">        char var4[128];</span>
<span class="S2">    };</span>

<span class="S2">    Schema:</span>
<span class="S2">    ------------------------------------</span>
<span class="S2">    \ int    \ byte   \ uint   \ char   \</span>
<span class="S2">     \   var1 \   var2 \   var3 \   var4 \</span>
<span class="S2">      ------------------------------------</span>
<span class="S2">    #ce</span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Assign a Local constant variable the definition of a structure (read carefully the DllStructCreate remarks).</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Const</span></a><span class="S0"> </span><a class="codeSnippetLink" href="$tagSTRUCT1.htm"><span class="S9">$tagSTRUCT1</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"<span translate="yes">struct;int var1;byte var2;uint var3;char var4[128];endstruct</span>"</span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Note: The tag variable is declared as Constant because its value will never change for any script execution.</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Assign a Local variable the structure.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$tSTRUCT1</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/DllStructCreate.htm"><span class="S4">DllStructCreate</span></a><span class="S8">(</span><a class="codeSnippetLink" href="$tagSTRUCT1.htm"><span class="S9">$tagSTRUCT1</span></a><span class="S8">)</span>

<span class="S0">    </span><span class="S1">; <span translate="yes">If an error occurred display the error code and return False.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@error"><span class="S6">@error</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">        </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7" translate="no">""</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">Error in DllStructCreate, Code:</span> "</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@error"><span class="S6">@error</span></a><span class="S8">)</span>
<span class="S0">        </span><a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Return</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/Booleans.htm"><span class="S5">False</span></a>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>

<span class="S0">    </span><span class="S1">; <span translate="yes">Set the data of the element var1 (int) in the $tSTRUCT1.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">var1</span>"</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or 1 instead of "var1".</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Set the data of the element var2 (byte) in the $tSTRUCT1.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">2</span><span class="S8">,</span><span class="S0"> </span><span class="S3">255</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or "var2" instead of 2.</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Set the data of the element var3 (uint) in the $tSTRUCT1.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">var3</span>"</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; <span translate="yes">The -1 (signed int) will be typecasted to unsigned int.</span></span>
<span class="S0">    </span><span class="S1">; <span translate="yes">Or 3 instead of "var3".</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Set the data of the element var4 (char) in the $tSTRUCT1.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">var4</span>"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">Hello</span>"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or 4 instead of "var4".</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Note: This element can contain up to 128 characters.</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Change the data of the element var4 (char) in the $tSTRUCT1, at the index 1 of the char array (1 based index).</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">var4</span>"</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/Asc.htm"><span class="S4">Asc</span></a><span class="S8">(</span><span class="S7">"<span translate="yes">h</span>"</span><span class="S8">),</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Display the results.</span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7" translate="no">""</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">Struct Size:</span> "</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/DllStructGetSize.htm"><span class="S4">DllStructGetSize</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">            </span><span class="S7">"<span translate="yes">Struct pointer:</span> "</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/DllStructGetPtr.htm"><span class="S4">DllStructGetPtr</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">            </span><span class="S7">"<span translate="yes">Data:</span>"</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">            </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S8">_</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or "var1" instead of 1.</span></span>
<span class="S0">            </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"<span translate="yes">var2</span>"</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S8">_</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or 2 instead of "var2".</span></span>
<span class="S0">            </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S8">_</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or "var3" instead of 3.</span></span>
<span class="S0">            </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">4</span><span class="S8">))</span><span class="S0"> </span><span class="S1">; <span translate="yes">Or "var4" instead of 4.</span></span>

<span class="S0">    </span><span class="S1">; <span translate="yes">Release the resources used by the structure.</span></span>
<span class="S0">    </span><span class="S9">$tSTRUCT1</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0">   </span><span class="S1" translate="no">;==&gt;Example</span>
</span>
</pre>
      </div>
    </div>
  </div>
</body>
</html>
